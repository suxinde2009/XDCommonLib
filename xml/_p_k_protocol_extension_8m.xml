<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="_p_k_protocol_extension_8m" kind="file" language="Objective-C">
    <compoundname>PKProtocolExtension.m</compoundname>
    <includes local="no">Foundation/Foundation.h</includes>
    <includes refid="_p_k_protocol_extension_8h" local="yes">PKProtocolExtension.h</includes>
    <includes local="no">pthread.h</includes>
    <incdepgraph>
      <node id="3556">
        <label>PKProtocolExtension.h</label>
        <link refid="_p_k_protocol_extension_8h"/>
        <childnode refid="3555" relation="include">
        </childnode>
        <childnode refid="3557" relation="include">
        </childnode>
      </node>
      <node id="3554">
        <label>XDCommonLib/CommonBasicComponentLayer/Venders/ProtocolKit/PKProtocolExtension.m</label>
        <link refid="PKProtocolExtension.m"/>
        <childnode refid="3555" relation="include">
        </childnode>
        <childnode refid="3556" relation="include">
        </childnode>
        <childnode refid="3558" relation="include">
        </childnode>
      </node>
      <node id="3558">
        <label>pthread.h</label>
      </node>
      <node id="3557">
        <label>objc/runtime.h</label>
      </node>
      <node id="3555">
        <label>Foundation/Foundation.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_p_k_extended_protocol" prot="public">PKExtendedProtocol</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_p_k_protocol_extension_8m_1acd58bb41bb89c9167061431c5f7db4a6" prot="public" static="yes" mutable="no">
        <type><ref refid="struct_p_k_extended_protocol" kindref="compound">PKExtendedProtocol</ref> *</type>
        <definition>PKExtendedProtocol* allExtendedProtocols</definition>
        <argsstring></argsstring>
        <name>allExtendedProtocols</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Venders/ProtocolKit/PKProtocolExtension.m" line="35" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Venders/ProtocolKit/PKProtocolExtension.m" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_p_k_protocol_extension_8m_1ad52c08a2e66d9c072c4fae27c222ac04" prot="public" static="yes" mutable="no">
        <type>pthread_mutex_t</type>
        <definition>pthread_mutex_t protocolsLoadingLock</definition>
        <argsstring></argsstring>
        <name>protocolsLoadingLock</name>
        <initializer>= PTHREAD_MUTEX_INITIALIZER</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Venders/ProtocolKit/PKProtocolExtension.m" line="36" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Venders/ProtocolKit/PKProtocolExtension.m" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_p_k_protocol_extension_8m_1aa087a46e546f48e42fac4e6e096e7638" prot="public" static="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t extendedProtcolCount</definition>
        <argsstring></argsstring>
        <name>extendedProtcolCount</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Venders/ProtocolKit/PKProtocolExtension.m" line="37" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Venders/ProtocolKit/PKProtocolExtension.m" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_p_k_protocol_extension_8m_1a07b6a9de9949abc4f2d6ddbec9d1768d" prot="public" static="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t extendedProtcolCapacity</definition>
        <argsstring></argsstring>
        <name>extendedProtcolCapacity</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Venders/ProtocolKit/PKProtocolExtension.m" line="37" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Venders/ProtocolKit/PKProtocolExtension.m" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_p_k_protocol_extension_8m_1a8f885c74b99d3cfb41a1027a118fa716" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Method *</type>
        <definition>Method* _pk_extension_create_merged</definition>
        <argsstring>(Method *existMethods, unsigned existMethodCount, Method *appendingMethods, unsigned appendingMethodCount)</argsstring>
        <name>_pk_extension_create_merged</name>
        <param>
          <type>Method *</type>
          <declname>existMethods</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>existMethodCount</declname>
        </param>
        <param>
          <type>Method *</type>
          <declname>appendingMethods</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>appendingMethodCount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Venders/ProtocolKit/PKProtocolExtension.m" line="39" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Venders/ProtocolKit/PKProtocolExtension.m" bodystart="39" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="_p_k_protocol_extension_8m_1ae0d4a5f55fd26390800e366a8cc5b069" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _pk_extension_merge</definition>
        <argsstring>(PKExtendedProtocol *extendedProtocol, Class containerClass)</argsstring>
        <name>_pk_extension_merge</name>
        <param>
          <type><ref refid="struct_p_k_extended_protocol" kindref="compound">PKExtendedProtocol</ref> *</type>
          <declname>extendedProtocol</declname>
        </param>
        <param>
          <type>Class</type>
          <declname>containerClass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Venders/ProtocolKit/PKProtocolExtension.m" line="51" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Venders/ProtocolKit/PKProtocolExtension.m" bodystart="51" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="_p_k_protocol_extension_8m_1addede811c7fe2496117899a5c2dc2b4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _pk_extension_load</definition>
        <argsstring>(Protocol *protocol, Class containerClass)</argsstring>
        <name>_pk_extension_load</name>
        <param>
          <type>Protocol *</type>
          <declname>protocol</declname>
        </param>
        <param>
          <type>Class</type>
          <declname>containerClass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Venders/ProtocolKit/PKProtocolExtension.m" line="76" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Venders/ProtocolKit/PKProtocolExtension.m" bodystart="76" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="_p_k_protocol_extension_8m_1aee1589353ddcfbcbe00ee10f204735ea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _pk_extension_inject_class</definition>
        <argsstring>(Class targetClass, PKExtendedProtocol extendedProtocol)</argsstring>
        <name>_pk_extension_inject_class</name>
        <param>
          <type>Class</type>
          <declname>targetClass</declname>
        </param>
        <param>
          <type><ref refid="struct_p_k_extended_protocol" kindref="compound">PKExtendedProtocol</ref></type>
          <declname>extendedProtocol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Venders/ProtocolKit/PKProtocolExtension.m" line="116" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Venders/ProtocolKit/PKProtocolExtension.m" bodystart="116" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="_p_k_protocol_extension_8m_1ab1f0134a8e50225975b78c8472160902" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>__attribute__</definition>
        <argsstring>((constructor)) static void _pk_extension_inject_entry(void)</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(constructor)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Venders/ProtocolKit/PKProtocolExtension.m" line="149" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Venders/ProtocolKit/PKProtocolExtension.m" bodystart="149" bodyend="173"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>The<sp/>MIT<sp/>License<sp/>(MIT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2015-2016<sp/>forkingdog<sp/>(<sp/>https://github.com/forkingdog<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SOFTWARE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#import<sp/>&lt;Foundation/Foundation.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#import<sp/>&quot;<ref refid="_p_k_protocol_extension_8h" kindref="compound">PKProtocolExtension.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#import<sp/>&lt;pthread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="struct_p_k_extended_protocol" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="28" refid="struct_p_k_extended_protocol_1adbfb86099db958a086b166d4b48c46ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Protocol<sp/>*__unsafe_unretained<sp/><ref refid="struct_p_k_extended_protocol_1adbfb86099db958a086b166d4b48c46ea" kindref="member">protocol</ref>;</highlight></codeline>
<codeline lineno="29" refid="struct_p_k_extended_protocol_1a644a0a862655f2794772c962fffcb125" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Method<sp/>*<ref refid="struct_p_k_extended_protocol_1a644a0a862655f2794772c962fffcb125" kindref="member">instanceMethods</ref>;</highlight></codeline>
<codeline lineno="30" refid="struct_p_k_extended_protocol_1af4af6e39141247e95bc5d86c4e7ecc9d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="struct_p_k_extended_protocol_1af4af6e39141247e95bc5d86c4e7ecc9d" kindref="member">instanceMethodCount</ref>;</highlight></codeline>
<codeline lineno="31" refid="struct_p_k_extended_protocol_1adcf9ce1e78a9bf56eec17bf60415e354" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Method<sp/>*<ref refid="struct_p_k_extended_protocol_1adcf9ce1e78a9bf56eec17bf60415e354" kindref="member">classMethods</ref>;</highlight></codeline>
<codeline lineno="32" refid="struct_p_k_extended_protocol_1a7ff8887a919aa423cb5cee810e7d8e5e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="struct_p_k_extended_protocol_1a7ff8887a919aa423cb5cee810e7d8e5e" kindref="member">classMethodCount</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}<sp/><ref refid="struct_p_k_extended_protocol" kindref="compound">PKExtendedProtocol</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_p_k_extended_protocol" kindref="compound">PKExtendedProtocol</ref><sp/>*allExtendedProtocols<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>pthread_mutex_t<sp/>protocolsLoadingLock<sp/>=<sp/>PTHREAD_MUTEX_INITIALIZER;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>extendedProtcolCount<sp/>=<sp/>0,<sp/>extendedProtcolCapacity<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="_p_k_protocol_extension_8m_1a8f885c74b99d3cfb41a1027a118fa716" refkind="member"><highlight class="normal">Method<sp/>*<ref refid="_p_k_protocol_extension_8m_1a8f885c74b99d3cfb41a1027a118fa716" kindref="member">_pk_extension_create_merged</ref>(Method<sp/>*existMethods,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>existMethodCount,<sp/>Method<sp/>*appendingMethods,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>appendingMethodCount)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(existMethodCount<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>appendingMethods;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>mergedMethodCount<sp/>=<sp/>existMethodCount<sp/>+<sp/>appendingMethodCount;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>Method<sp/>*mergedMethods<sp/>=<sp/>malloc(mergedMethodCount<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Method));</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(mergedMethods,<sp/>existMethods,<sp/>existMethodCount<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Method));</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(mergedMethods<sp/>+<sp/>existMethodCount,<sp/>appendingMethods,<sp/>appendingMethodCount<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Method));</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mergedMethods;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="_p_k_protocol_extension_8m_1ae0d4a5f55fd26390800e366a8cc5b069" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_p_k_protocol_extension_8m_1ae0d4a5f55fd26390800e366a8cc5b069" kindref="member">_pk_extension_merge</ref>(<ref refid="struct_p_k_extended_protocol" kindref="compound">PKExtendedProtocol</ref><sp/>*extendedProtocol,<sp/>Class<sp/>containerClass)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Instance<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>appendingInstanceMethodCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>Method<sp/>*appendingInstanceMethods<sp/>=<sp/>class_copyMethodList(containerClass,<sp/>&amp;appendingInstanceMethodCount);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>Method<sp/>*mergedInstanceMethods<sp/>=<sp/><ref refid="_p_k_protocol_extension_8m_1a8f885c74b99d3cfb41a1027a118fa716" kindref="member">_pk_extension_create_merged</ref>(extendedProtocol-&gt;<ref refid="struct_p_k_extended_protocol_1a644a0a862655f2794772c962fffcb125" kindref="member">instanceMethods</ref>,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extendedProtocol-&gt;<ref refid="struct_p_k_extended_protocol_1af4af6e39141247e95bc5d86c4e7ecc9d" kindref="member">instanceMethodCount</ref>,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>appendingInstanceMethods,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>appendingInstanceMethodCount);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>free(extendedProtocol-&gt;<ref refid="struct_p_k_extended_protocol_1a644a0a862655f2794772c962fffcb125" kindref="member">instanceMethods</ref>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>extendedProtocol-&gt;<ref refid="struct_p_k_extended_protocol_1a644a0a862655f2794772c962fffcb125" kindref="member">instanceMethods</ref><sp/>=<sp/>mergedInstanceMethods;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>extendedProtocol-&gt;<ref refid="struct_p_k_extended_protocol_1af4af6e39141247e95bc5d86c4e7ecc9d" kindref="member">instanceMethodCount</ref><sp/>+=<sp/>appendingInstanceMethodCount;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Class<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>appendingClassMethodCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>Method<sp/>*appendingClassMethods<sp/>=<sp/>class_copyMethodList(object_getClass(containerClass),<sp/>&amp;appendingClassMethodCount);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>Method<sp/>*mergedClassMethods<sp/>=<sp/><ref refid="_p_k_protocol_extension_8m_1a8f885c74b99d3cfb41a1027a118fa716" kindref="member">_pk_extension_create_merged</ref>(extendedProtocol-&gt;<ref refid="struct_p_k_extended_protocol_1adcf9ce1e78a9bf56eec17bf60415e354" kindref="member">classMethods</ref>,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extendedProtocol-&gt;<ref refid="struct_p_k_extended_protocol_1a7ff8887a919aa423cb5cee810e7d8e5e" kindref="member">classMethodCount</ref>,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>appendingClassMethods,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>appendingClassMethodCount);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>free(extendedProtocol-&gt;<ref refid="struct_p_k_extended_protocol_1adcf9ce1e78a9bf56eec17bf60415e354" kindref="member">classMethods</ref>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>extendedProtocol-&gt;<ref refid="struct_p_k_extended_protocol_1adcf9ce1e78a9bf56eec17bf60415e354" kindref="member">classMethods</ref><sp/>=<sp/>mergedClassMethods;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>extendedProtocol-&gt;<ref refid="struct_p_k_extended_protocol_1a7ff8887a919aa423cb5cee810e7d8e5e" kindref="member">classMethodCount</ref><sp/>+=<sp/>appendingClassMethodCount;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="_p_k_protocol_extension_8h_1addede811c7fe2496117899a5c2dc2b4d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_p_k_protocol_extension_8m_1addede811c7fe2496117899a5c2dc2b4d" kindref="member">_pk_extension_load</ref>(Protocol<sp/>*protocol,<sp/>Class<sp/>containerClass)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_lock(&amp;protocolsLoadingLock);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extendedProtcolCount<sp/>&gt;=<sp/>extendedProtcolCapacity)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newCapacity<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extendedProtcolCapacity<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newCapacity<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newCapacity<sp/>=<sp/>extendedProtcolCapacity<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allExtendedProtocols<sp/>=<sp/>realloc(allExtendedProtocols,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*allExtendedProtocols)<sp/>*<sp/>newCapacity);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extendedProtcolCapacity<sp/>=<sp/>newCapacity;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>resultIndex<sp/>=<sp/>SIZE_T_MAX;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>extendedProtcolCount;<sp/>++index)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allExtendedProtocols[index].protocol<sp/>==<sp/>protocol)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resultIndex<sp/>=<sp/>index;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resultIndex<sp/>==<sp/>SIZE_T_MAX)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allExtendedProtocols[extendedProtcolCount]<sp/>=<sp/>(<ref refid="struct_p_k_extended_protocol" kindref="compound">PKExtendedProtocol</ref>){</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="struct_p_k_extended_protocol_1adbfb86099db958a086b166d4b48c46ea" kindref="member">protocol</ref><sp/>=<sp/>protocol,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.instanceMethods<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.instanceMethodCount<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.classMethods<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.classMethodCount<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resultIndex<sp/>=<sp/>extendedProtcolCount;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extendedProtcolCount++;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_k_protocol_extension_8m_1ae0d4a5f55fd26390800e366a8cc5b069" kindref="member">_pk_extension_merge</ref>(&amp;(allExtendedProtocols[resultIndex]),<sp/>containerClass);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_unlock(&amp;protocolsLoadingLock);</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_pk_extension_inject_class(Class<sp/>targetClass,<sp/><ref refid="struct_p_k_extended_protocol" kindref="compound">PKExtendedProtocol</ref><sp/>extendedProtocol)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>methodIndex<sp/>=<sp/>0;<sp/>methodIndex<sp/>&lt;<sp/>extendedProtocol.<ref refid="struct_p_k_extended_protocol_1af4af6e39141247e95bc5d86c4e7ecc9d" kindref="member">instanceMethodCount</ref>;<sp/>++methodIndex)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Method<sp/>method<sp/>=<sp/>extendedProtocol.<ref refid="struct_p_k_extended_protocol_1a644a0a862655f2794772c962fffcb125" kindref="member">instanceMethods</ref>[methodIndex];</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal"><sp/>selector<sp/>=<sp/>method_getName(method);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(class_getInstanceMethod(targetClass,<sp/>selector))<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMP<sp/>imp<sp/>=<sp/>method_getImplementation(method);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*types<sp/>=<sp/>method_getTypeEncoding(method);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_addMethod(targetClass,<sp/>selector,<sp/>imp,<sp/>types);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>Class<sp/>targetMetaClass<sp/>=<sp/>object_getClass(targetClass);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>methodIndex<sp/>=<sp/>0;<sp/>methodIndex<sp/>&lt;<sp/>extendedProtocol.<ref refid="struct_p_k_extended_protocol_1a7ff8887a919aa423cb5cee810e7d8e5e" kindref="member">classMethodCount</ref>;<sp/>++methodIndex)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Method<sp/>method<sp/>=<sp/>extendedProtocol.<ref refid="struct_p_k_extended_protocol_1adcf9ce1e78a9bf56eec17bf60415e354" kindref="member">classMethods</ref>[methodIndex];</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal"><sp/>selector<sp/>=<sp/>method_getName(method);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(selector<sp/>==<sp/></highlight><highlight class="keyword">@selector</highlight><highlight class="normal">(load)<sp/>||<sp/>selector<sp/>==<sp/></highlight><highlight class="keyword">@selector</highlight><highlight class="normal">(initialize))<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(class_getInstanceMethod(targetMetaClass,<sp/>selector))<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMP<sp/>imp<sp/>=<sp/>method_getImplementation(method);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*types<sp/>=<sp/>method_getTypeEncoding(method);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_addMethod(targetMetaClass,<sp/>selector,<sp/>imp,<sp/>types);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="_p_k_protocol_extension_8m_1ab1f0134a8e50225975b78c8472160902" refkind="member"><highlight class="normal"><ref refid="_p_k_protocol_extension_8m_1ab1f0134a8e50225975b78c8472160902" kindref="member">__attribute__</ref>((constructor))<sp/>static<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_pk_extension_inject_entry(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_lock(&amp;protocolsLoadingLock);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>classCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>Class<sp/>*allClasses<sp/>=<sp/>objc_copyClassList(&amp;classCount);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>@autoreleasepool<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>protocolIndex<sp/>=<sp/>0;<sp/>protocolIndex<sp/>&lt;<sp/>extendedProtcolCount;<sp/>++protocolIndex)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_p_k_extended_protocol" kindref="compound">PKExtendedProtocol</ref><sp/>extendedProtcol<sp/>=<sp/>allExtendedProtocols[protocolIndex];</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>classIndex<sp/>=<sp/>0;<sp/>classIndex<sp/>&lt;<sp/>classCount;<sp/>++classIndex)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Class<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">=<sp/>allClasses[classIndex];</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!class_conformsToProtocol(</highlight><highlight class="keyword">class</highlight><highlight class="normal">,<sp/>extendedProtcol.<ref refid="struct_p_k_extended_protocol_1adbfb86099db958a086b166d4b48c46ea" kindref="member">protocol</ref>))<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_pk_extension_inject_class(</highlight><highlight class="keyword">class</highlight><highlight class="normal">,<sp/>extendedProtcol);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_unlock(&amp;protocolsLoadingLock);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>free(allClasses);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>free(allExtendedProtocols);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>extendedProtcolCount<sp/>=<sp/>0,<sp/>extendedProtcolCapacity<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Venders/ProtocolKit/PKProtocolExtension.m"/>
  </compounddef>
</doxygen>
