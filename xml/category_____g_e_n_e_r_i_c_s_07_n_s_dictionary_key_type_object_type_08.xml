<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="category_____g_e_n_e_r_i_c_s_07_n_s_dictionary_key_type_object_type_08" kind="category" language="Objective-C" prot="public">
    <compoundname>__GENERICS(NSDictionaryKeyTypeObjectType)</compoundname>
    <includes refid="_n_s_dictionary_09_blocks_kit_8h" local="no">NSDictionary+BlocksKit.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="category_____g_e_n_e_r_i_c_s_07_n_s_dictionary_key_type_object_type_08_1a6a4b317a41a45bdbe4d8c26c6ebaa8ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void __GENERICS(NSDictionaryKeyTypeObjectType)::bk_each:</definition>
        <argsstring>(void(^block)(KeyType key, ObjectType obj))</argsstring>
        <name>bk_each:</name>
        <param>
          <type>void(^)(KeyType key, ObjectType obj)</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loops through the dictionary and executes the given block using each item.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A block that performs an action using a key/value pair. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSDictionary+BlocksKit.h" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="category_____g_e_n_e_r_i_c_s_07_n_s_dictionary_key_type_object_type_08_1ac3165917c8af304d3f1de9c410c1c567" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void __GENERICS(NSDictionaryKeyTypeObjectType)::bk_apply:</definition>
        <argsstring>(void(^block)(KeyType key, ObjectType obj))</argsstring>
        <name>bk_apply:</name>
        <param>
          <type>void(^)(KeyType key, ObjectType obj)</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enumerates through the dictionary concurrently and executes the given block once for each pair.</para><para>Enumeration will occur on appropriate background queues; the system will spawn threads as need for execution. This will have a noticeable speed increase, especially on dual-core devices, but you <emphasis>must</emphasis> be aware of the thread safety of the objects you message from within the block.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A block that performs an action using a key/value pair. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSDictionary+BlocksKit.h" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="category_____g_e_n_e_r_i_c_s_07_n_s_dictionary_key_type_object_type_08_1a8cea5742490541b2d1eed5080e0033ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="_b_k_defines_8h_1a02648067ad66739ed70a10195891098a" kindref="member">nullable</ref> id</type>
        <definition>nullable id __GENERICS(NSDictionaryKeyTypeObjectType)::bk_match:</definition>
        <argsstring>(BOOL(^block)(KeyType key, ObjectType obj))</argsstring>
        <name>bk_match:</name>
        <param>
          <type>BOOL(^)(KeyType key, ObjectType obj)</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loops through a dictionary to find the first key/value pair matching the block.</para><para>bk_match: is functionally identical to bk_select:, but will stop and return the value on the first match.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A BOOL-returning code block for a key/value pair. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the first pair found; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSDictionary+BlocksKit.h" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="category_____g_e_n_e_r_i_c_s_07_n_s_dictionary_key_type_object_type_08_1a56dc366d0e15e9a2bd4417ded2a5fdaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>NSDictionary *</type>
        <definition>NSDictionary * __GENERICS(NSDictionaryKeyTypeObjectType)::bk_select:</definition>
        <argsstring>(BOOL(^block)(KeyType key, ObjectType obj))</argsstring>
        <name>bk_select:</name>
        <param>
          <type>BOOL(^)(KeyType key, ObjectType obj)</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loops through a dictionary to find the key/value pairs matching the block.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A BOOL-returning code block for a key/value pair. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a dictionary of the objects found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSDictionary+BlocksKit.h" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="category_____g_e_n_e_r_i_c_s_07_n_s_dictionary_key_type_object_type_08_1a9a96ccbb40f942ef297e3010c2ff2a3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>NSDictionary *</type>
        <definition>NSDictionary * __GENERICS(NSDictionaryKeyTypeObjectType)::bk_reject:</definition>
        <argsstring>(BOOL(^block)(KeyType key, ObjectType obj))</argsstring>
        <name>bk_reject:</name>
        <param>
          <type>BOOL(^)(KeyType key, ObjectType obj)</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loops through a dictionary to find the key/value pairs not matching the block.</para><para>This selector performs <emphasis>literally</emphasis> the exact same function as bk_select: but in reverse.</para><para>This is useful, as one may expect, for filtering objects. NSDictionary *strings = [userData bk_reject:^BOOL(id key, id value) { return ([obj isKindOfClass:[NSString class]]); }];</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A BOOL-returning code block for a key/value pair. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a dictionary of all objects not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSDictionary+BlocksKit.h" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="category_____g_e_n_e_r_i_c_s_07_n_s_dictionary_key_type_object_type_08_1af0e564831ebdf3accc67e3ea708c9ccf" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>NSDictionary *</type>
        <definition>NSDictionary * __GENERICS(NSDictionaryKeyTypeObjectType)::bk_map:</definition>
        <argsstring>(id(^block)(KeyType key, ObjectType obj))</argsstring>
        <name>bk_map:</name>
        <param>
          <type>id(^)(KeyType key, ObjectType obj)</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Call the block once for each object and create a dictionary with the same keys and a new set of values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A block that returns a new value for a key/value pair. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a dictionary of the objects returned by the block. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSDictionary+BlocksKit.h" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="category_____g_e_n_e_r_i_c_s_07_n_s_dictionary_key_type_object_type_08_1a738c22f498476c5f44dbf637c4eae4d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>BOOL</type>
        <definition>BOOL __GENERICS(NSDictionaryKeyTypeObjectType)::bk_any:</definition>
        <argsstring>(BOOL(^block)(KeyType key, ObjectType obj))</argsstring>
        <name>bk_any:</name>
        <param>
          <type>BOOL(^)(KeyType key, ObjectType obj)</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loops through a dictionary to find whether any key/value pair matches the block.</para><para>This method is similar to the Scala list <computeroutput>exists</computeroutput>. It is functionally identical to bk_match: but returns a <computeroutput>BOOL</computeroutput> instead. It is not recommended to use bk_any: as a check condition before executing bk_match:, since it would require two loops through the dictionary.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A two-argument, BOOL-returning code block. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>YES for the first time the block returns YES for a key/value pair, NO otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSDictionary+BlocksKit.h" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="category_____g_e_n_e_r_i_c_s_07_n_s_dictionary_key_type_object_type_08_1a90cdcbc177fcc4b03b91b3a5fb32033c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>BOOL</type>
        <definition>BOOL __GENERICS(NSDictionaryKeyTypeObjectType)::bk_none:</definition>
        <argsstring>(BOOL(^block)(KeyType key, ObjectType obj))</argsstring>
        <name>bk_none:</name>
        <param>
          <type>BOOL(^)(KeyType key, ObjectType obj)</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loops through a dictionary to find whether no key/value pairs match the block.</para><para>This selector performs <emphasis>literally</emphasis> the exact same function as bk_all: but in reverse.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A two-argument, BOOL-returning code block. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>YES if the block returns NO for all key/value pairs in the dictionary, NO otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSDictionary+BlocksKit.h" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="category_____g_e_n_e_r_i_c_s_07_n_s_dictionary_key_type_object_type_08_1a2532571e933b1776ee509c6d6013b54c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>BOOL</type>
        <definition>BOOL __GENERICS(NSDictionaryKeyTypeObjectType)::bk_all:</definition>
        <argsstring>(BOOL(^block)(KeyType key, ObjectType obj))</argsstring>
        <name>bk_all:</name>
        <param>
          <type>BOOL(^)(KeyType key, ObjectType obj)</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loops through a dictionary to find whether all key/value pairs match the block.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A two-argument, BOOL-returning code block. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>YES if the block returns YES for all key/value pairs in the dictionary, NO otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSDictionary+BlocksKit.h" line="25" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Block extension for NSDictionary.</para><para>Both inspired by and resembling Smalltalk syntax, this utility allows iteration of a dictionary in a concise way that saves quite a bit of boilerplate code.</para><para>Includes code by the following:</para><para><itemizedlist>
<listitem><para><ulink url="https://github.com/mirkok">Mirko Kiefer</ulink></para></listitem><listitem><para><ulink url="https://github.com/zwaldowski">Zach Waldowski</ulink></para><para><simplesect kind="see"><para>NSArray(BlocksKit) </para></simplesect>
<simplesect kind="see"><para>NSSet(BlocksKit) </para></simplesect>
</para></listitem></itemizedlist>
</para>    </detaileddescription>
    <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSDictionary+BlocksKit.h" line="25" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSDictionary+BlocksKit.h" bodystart="25" bodyend="-1"/>
    <listofallmembers>
      <member refid="category_____g_e_n_e_r_i_c_s_07_n_s_dictionary_key_type_object_type_08_1a2532571e933b1776ee509c6d6013b54c" prot="public" virt="virtual"><scope>__GENERICS(NSDictionaryKeyTypeObjectType)</scope><name>bk_all:</name></member>
      <member refid="category_____g_e_n_e_r_i_c_s_07_n_s_dictionary_key_type_object_type_08_1a738c22f498476c5f44dbf637c4eae4d1" prot="public" virt="virtual"><scope>__GENERICS(NSDictionaryKeyTypeObjectType)</scope><name>bk_any:</name></member>
      <member refid="category_____g_e_n_e_r_i_c_s_07_n_s_dictionary_key_type_object_type_08_1ac3165917c8af304d3f1de9c410c1c567" prot="public" virt="virtual"><scope>__GENERICS(NSDictionaryKeyTypeObjectType)</scope><name>bk_apply:</name></member>
      <member refid="category_____g_e_n_e_r_i_c_s_07_n_s_dictionary_key_type_object_type_08_1a6a4b317a41a45bdbe4d8c26c6ebaa8ec" prot="public" virt="virtual"><scope>__GENERICS(NSDictionaryKeyTypeObjectType)</scope><name>bk_each:</name></member>
      <member refid="category_____g_e_n_e_r_i_c_s_07_n_s_dictionary_key_type_object_type_08_1af0e564831ebdf3accc67e3ea708c9ccf" prot="public" virt="virtual"><scope>__GENERICS(NSDictionaryKeyTypeObjectType)</scope><name>bk_map:</name></member>
      <member refid="category_____g_e_n_e_r_i_c_s_07_n_s_dictionary_key_type_object_type_08_1a8cea5742490541b2d1eed5080e0033ab" prot="public" virt="virtual"><scope>__GENERICS(NSDictionaryKeyTypeObjectType)</scope><name>bk_match:</name></member>
      <member refid="category_____g_e_n_e_r_i_c_s_07_n_s_dictionary_key_type_object_type_08_1a90cdcbc177fcc4b03b91b3a5fb32033c" prot="public" virt="virtual"><scope>__GENERICS(NSDictionaryKeyTypeObjectType)</scope><name>bk_none:</name></member>
      <member refid="category_____g_e_n_e_r_i_c_s_07_n_s_dictionary_key_type_object_type_08_1a9a96ccbb40f942ef297e3010c2ff2a3c" prot="public" virt="virtual"><scope>__GENERICS(NSDictionaryKeyTypeObjectType)</scope><name>bk_reject:</name></member>
      <member refid="category_____g_e_n_e_r_i_c_s_07_n_s_dictionary_key_type_object_type_08_1a56dc366d0e15e9a2bd4417ded2a5fdaf" prot="public" virt="virtual"><scope>__GENERICS(NSDictionaryKeyTypeObjectType)</scope><name>bk_select:</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
