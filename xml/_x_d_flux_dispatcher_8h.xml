<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="_x_d_flux_dispatcher_8h" kind="file" language="C++">
    <compoundname>XDFluxDispatcher.h</compoundname>
    <includes local="no">Foundation/Foundation.h</includes>
    <includedby refid="_x_d_flux_dispatcher_8m" local="yes">XDCommonLib/LooseCoupling CommuniateLayer/FluxDispatcher/XDFluxDispatcher.m</includedby>
    <incdepgraph>
      <node id="3724">
        <label>XDCommonLib/LooseCoupling CommuniateLayer/FluxDispatcher/XDFluxDispatcher.h</label>
        <link refid="XDFluxDispatcher.h"/>
        <childnode refid="3725" relation="include">
        </childnode>
      </node>
      <node id="3725">
        <label>Foundation/Foundation.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3726">
        <label>XDCommonLib/LooseCoupling CommuniateLayer/FluxDispatcher/XDFluxDispatcher.h</label>
        <link refid="XDFluxDispatcher.h"/>
        <childnode refid="3727" relation="include">
        </childnode>
      </node>
      <node id="3727">
        <label>XDCommonLib/LooseCoupling CommuniateLayer/FluxDispatcher/XDFluxDispatcher.m</label>
        <link refid="_x_d_flux_dispatcher_8m"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_x_d_flux_dispatcher" prot="public">XDFluxDispatcher</innerclass>
      <sectiondef kind="user-defined">
      <memberdef kind="typedef" id="_x_d_flux_dispatcher_8h_1a581ab28532d13034e0b9f14305fef27f" prot="public" static="no">
        <type>void(^</type>
        <definition>typedef void(^ XDFluxDispatcherCallback) (NSDictionary *payload)</definition>
        <argsstring>)(NSDictionary *payload)</argsstring>
        <name>XDFluxDispatcherCallback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is a port of Facebook&apos;s Flux Dispatcher to Objective-C</para><para><ref refid="class_x_d_flux_dispatcher" kindref="compound">XDFluxDispatcher</ref> is used to broadcast payloads to registered callbacks. This is different from generic pub-sub systems in two ways:</para><para>1) Callbacks are not subscribed to particular events. Every payload is dispatched to every registered callback. 2) Callbacks can be deferred in whole or part until other callbacks have been executed.</para><para>For example, consider this hypothetical flight destination form, which selects a default city when a country is selected:</para><para><ref refid="class_x_d_flux_dispatcher" kindref="compound">XDFluxDispatcher</ref> *flightDispatcher = [<ref refid="class_x_d_flux_dispatcher" kindref="compound">XDFluxDispatcher</ref> new];</para><para>// Keeps track of which country is selected NSMutableDictionary *countryStore ="country": [NSNull null]};</para><para>// Keeps track of which city is selected NSMutableDictionary *cityStore ="city": [NSNull null]};</para><para>// Keeps track of the base flight price of the selected city NSMutableDictionary *flightPriceStore ="price": [NSNull null]};</para><para>When a user changes the selected city, we dispatch the payload:</para><para>[flightDispatcher dispatch: "actionType&quot;: @&quot;city-update&quot;,
    @&quot;selectedCity&quot;: @&quot;paris" }];</para><para>This payload is digested by <computeroutput>cityStore</computeroutput>:</para><para>[flightDispatcher registerCallback:^(NSDictionary *payload) { if ([payload["actionType&quot;] isEqualToString:@&quot;city-update&quot;]) {
      cityStore[@&quot;city&quot;] = payload[@&quot;selectedCity"]; } }]</para><para>When the user selects a country, we dispatch the payload:</para><para>[flightDispatcher dispatch: "actionType&quot;: @&quot;country-update&quot;,
    @&quot;selectedCountry&quot;: @&quot;australia" }];</para><para>This payload is digested by both stores:</para><para>countryStore["dispatchToken&quot;] = [flightDispatcher registerCallback:^(NSDictionary *payload) {
    if ([payload[@&quot;actionType&quot;] isEqualToString:@&quot;country-update&quot;]) {
      countryStore[@&quot;country&quot;] = payload[@&quot;selectedCountry"]; } }];</para><para>When the callback to update <computeroutput>countryStore</computeroutput> is registered, we save a reference to the returned token. Using this token with <computeroutput>waitFor()</computeroutput>, we can guarantee that <computeroutput>countryStore</computeroutput> is updated before the callback that updates <computeroutput>cityStore</computeroutput> needs to query its data.</para><para>cityStore["dispatchToken&quot;] = [flightDispatcher registerCallback:^(NSDictionary *payload) {
    if ([payload[@&quot;actionType&quot;] isEqualToString:@&quot;country-update&quot;]) {
      // &lt;tt&gt;countryStore[\@&quot;country&quot;]&lt;/tt&gt; may not be updated.
      [flightDispatcher waitFor:@[countryStore[@&quot;dispatchToken&quot;]]];
      // &lt;tt&gt;countryStore[\@&quot;country"] is now guaranteed to be updated.</para><para>// Select the default city for the new country cityStore["city&quot;] = getDefaultCityForCountry(countryStore[@&quot;country"]); } }];</para><para>The usage of <computeroutput>waitFor()</computeroutput> can be chained, for example:</para><para>flightPriceStore["dispatchToken"] = [flightDispatcher registerCallback:^(NSDictionary *payload) { if ([payload["actionType&quot;] isEqualToString: @&quot;country-update&quot;]) {
          [flightDispatcher waitFor: @[cityStore[@&quot;dispatchToken&quot;]]];
          flightPriceStore[@&quot;price&quot;] =
            getFlightPriceStore(countryStore[@&quot;country&quot;], cityStore[@&quot;city"]); } else if ([payload["actionType&quot;] isEqualToString: @&quot;city-update&quot;]) {
          flightPriceStore[@&quot;price&quot;] =
            getFlightPriceStore(countryStore[@&quot;country&quot;], cityStore[@&quot;city"]); } }];</para><para>The <computeroutput>country-update</computeroutput> payload will be guaranteed to invoke the stores&apos; registered callbacks in order: <computeroutput>countryStore</computeroutput>, <computeroutput>cityStore</computeroutput>, then <computeroutput>flightPriceStore</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/LooseCoupling CommuniateLayer/FluxDispatcher/XDFluxDispatcher.h" line="106" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/LooseCoupling CommuniateLayer/FluxDispatcher/XDFluxDispatcher.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>XDFluxDispatcher.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>XDCommonLib</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Created<sp/>by<sp/>suxinde<sp/>on<sp/>16/5/22.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Copyright<sp/>©<sp/>2016年<sp/>su<sp/>xinde.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#import<sp/>&lt;Foundation/Foundation.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copy<sp/>From<sp/>CLAFluxDispatcher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="_x_d_flux_dispatcher_8h_1a581ab28532d13034e0b9f14305fef27f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/>void<sp/>(^<ref refid="_x_d_flux_dispatcher_8h_1a581ab28532d13034e0b9f14305fef27f" kindref="member">XDFluxDispatcherCallback</ref>)(NSDictionary<sp/>*payload);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keyword">@interface<sp/></highlight><highlight class="normal"><ref refid="class_x_d_flux_dispatcher" kindref="compound">XDFluxDispatcher</ref><sp/>:<sp/>NSObject</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">-<sp/>(void)dispatch:(NSDictionary<sp/>*)payload;</highlight></codeline>
<codeline lineno="111"><highlight class="normal">-<sp/>(void)waitFor:(NSArray<sp/>*)dispatchTokens;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal">-<sp/>(id)registerCallback:(<ref refid="_x_d_flux_dispatcher_8h_1a581ab28532d13034e0b9f14305fef27f" kindref="member">XDFluxDispatcherCallback</ref>)callback;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">-<sp/>(void)unregisterCallback:(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)dispatchToken;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">-<sp/>(BOOL)<ref refid="class_x_d_flux_dispatcher_1acc55d286923e5e3f407b7005b5294091" kindref="member">isDispatching</ref>;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">@end</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/suxinde/XDCommonLib/XDCommonLib/LooseCoupling CommuniateLayer/FluxDispatcher/XDFluxDispatcher.h"/>
  </compounddef>
</doxygen>
