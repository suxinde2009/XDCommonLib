<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="category_____g_e_n_e_r_i_c_s_07_n_s_map_table_key_type_object_type_08" kind="category" language="Objective-C" prot="public">
    <compoundname>__GENERICS(NSMapTableKeyTypeObjectType)</compoundname>
    <includes refid="_n_s_map_table_09_blocks_kit_8h" local="no">NSMapTable+BlocksKit.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="category_____g_e_n_e_r_i_c_s_07_n_s_map_table_key_type_object_type_08_1a8713921d6e078653d62734924ba5e8b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void __GENERICS(NSMapTableKeyTypeObjectType)::bk_each:</definition>
        <argsstring>(void(^block)(KeyType key, ObjectType obj))</argsstring>
        <name>bk_each:</name>
        <param>
          <type>void(^)(KeyType key, ObjectType obj)</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loops through the maptable and executes the given block using each item.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A block that performs an action using a key/value pair. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSMapTable+BlocksKit.h" line="11" column="1"/>
      </memberdef>
      <memberdef kind="function" id="category_____g_e_n_e_r_i_c_s_07_n_s_map_table_key_type_object_type_08_1a6b6f66e009f28f2b5c01609372967a43" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="_b_k_defines_8h_1a02648067ad66739ed70a10195891098a" kindref="member">nullable</ref> id</type>
        <definition>nullable id __GENERICS(NSMapTableKeyTypeObjectType)::bk_match:</definition>
        <argsstring>(BOOL(^block)(KeyType key, ObjectType obj))</argsstring>
        <name>bk_match:</name>
        <param>
          <type>BOOL(^)(KeyType key, ObjectType obj)</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loops through a maptable to find the first key/value pair matching the block.</para><para>bk_match: is functionally identical to bk_select:, but will stop and return the value on the first match.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A BOOL-returning code block for a key/value pair. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the first pair found; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSMapTable+BlocksKit.h" line="11" column="1"/>
      </memberdef>
      <memberdef kind="function" id="category_____g_e_n_e_r_i_c_s_07_n_s_map_table_key_type_object_type_08_1af7ec0e91b83a98ee3e1e5fced676392c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>NSMapTable *</type>
        <definition>NSMapTable * __GENERICS(NSMapTableKeyTypeObjectType)::bk_select:</definition>
        <argsstring>(BOOL(^block)(KeyType key, ObjectType obj))</argsstring>
        <name>bk_select:</name>
        <param>
          <type>BOOL(^)(KeyType key, ObjectType obj)</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loops through a maptable to find the key/value pairs matching the block.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A BOOL-returning code block for a key/value pair. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a maptable of the objects found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSMapTable+BlocksKit.h" line="11" column="1"/>
      </memberdef>
      <memberdef kind="function" id="category_____g_e_n_e_r_i_c_s_07_n_s_map_table_key_type_object_type_08_1a92017021c51283a91bfde06de43eea8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>NSMapTable *</type>
        <definition>NSMapTable * __GENERICS(NSMapTableKeyTypeObjectType)::bk_reject:</definition>
        <argsstring>(BOOL(^block)(KeyType key, ObjectType obj))</argsstring>
        <name>bk_reject:</name>
        <param>
          <type>BOOL(^)(KeyType key, ObjectType obj)</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loops through a maptable to find the key/value pairs not matching the block.</para><para>This selector performs <emphasis>literally</emphasis> the exact same function as bk_select: but in reverse.</para><para>This is useful, as one may expect, for filtering objects. NSMapTable *strings = [userData bk_reject:^BOOL(id key, id value) { return ([obj isKindOfClass:[NSString class]]); }];</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A BOOL-returning code block for a key/value pair. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a maptable of all objects not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSMapTable+BlocksKit.h" line="11" column="1"/>
      </memberdef>
      <memberdef kind="function" id="category_____g_e_n_e_r_i_c_s_07_n_s_map_table_key_type_object_type_08_1a03962f24a1a525a4edf015bcc12d306a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>NSMapTable *</type>
        <definition>NSMapTable * __GENERICS(NSMapTableKeyTypeObjectType)::bk_map:</definition>
        <argsstring>(id(^block)(KeyType key, ObjectType obj))</argsstring>
        <name>bk_map:</name>
        <param>
          <type>id(^)(KeyType key, ObjectType obj)</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Call the block once for each object and create a maptable with the same keys and a new set of values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A block that returns a new value for a key/value pair. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a maptable of the objects returned by the block. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSMapTable+BlocksKit.h" line="11" column="1"/>
      </memberdef>
      <memberdef kind="function" id="category_____g_e_n_e_r_i_c_s_07_n_s_map_table_key_type_object_type_08_1a633c19cac0d94fab1134ef814425b52e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>BOOL</type>
        <definition>BOOL __GENERICS(NSMapTableKeyTypeObjectType)::bk_any:</definition>
        <argsstring>(BOOL(^block)(KeyType key, ObjectType obj))</argsstring>
        <name>bk_any:</name>
        <param>
          <type>BOOL(^)(KeyType key, ObjectType obj)</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loops through a maptable to find whether any key/value pair matches the block.</para><para>This method is similar to the Scala list <computeroutput>exists</computeroutput>. It is functionally identical to bk_match: but returns a <computeroutput>BOOL</computeroutput> instead. It is not recommended to use bk_any: as a check condition before executing bk_match:, since it would require two loops through the maptable.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A two-argument, BOOL-returning code block. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>YES for the first time the block returns YES for a key/value pair, NO otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSMapTable+BlocksKit.h" line="11" column="1"/>
      </memberdef>
      <memberdef kind="function" id="category_____g_e_n_e_r_i_c_s_07_n_s_map_table_key_type_object_type_08_1a466f63c15a9126877a6ba4d1199ff1ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>BOOL</type>
        <definition>BOOL __GENERICS(NSMapTableKeyTypeObjectType)::bk_none:</definition>
        <argsstring>(BOOL(^block)(KeyType key, ObjectType obj))</argsstring>
        <name>bk_none:</name>
        <param>
          <type>BOOL(^)(KeyType key, ObjectType obj)</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loops through a maptable to find whether no key/value pairs match the block.</para><para>This selector performs <emphasis>literally</emphasis> the exact same function as bk_all: but in reverse.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A two-argument, BOOL-returning code block. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>YES if the block returns NO for all key/value pairs in the maptable, NO otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSMapTable+BlocksKit.h" line="11" column="1"/>
      </memberdef>
      <memberdef kind="function" id="category_____g_e_n_e_r_i_c_s_07_n_s_map_table_key_type_object_type_08_1a775a0fc5ecd8216ea321e859256e4868" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>BOOL</type>
        <definition>BOOL __GENERICS(NSMapTableKeyTypeObjectType)::bk_all:</definition>
        <argsstring>(BOOL(^block)(KeyType key, ObjectType obj))</argsstring>
        <name>bk_all:</name>
        <param>
          <type>BOOL(^)(KeyType key, ObjectType obj)</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loops through a maptable to find whether all key/value pairs match the block.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A two-argument, BOOL-returning code block. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>YES if the block returns YES for all key/value pairs in the maptable, NO otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSMapTable+BlocksKit.h" line="11" column="1"/>
      </memberdef>
      <memberdef kind="function" id="category_____g_e_n_e_r_i_c_s_07_n_s_map_table_key_type_object_type_08_1a440061820b496a3d7ecac4cd7190640b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void __GENERICS(NSMapTableKeyTypeObjectType)::bk_performSelect:</definition>
        <argsstring>(BOOL(^block)(KeyType key, ObjectType obj))</argsstring>
        <name>bk_performSelect:</name>
        <param>
          <type>BOOL(^)(KeyType key, ObjectType obj)</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Filters a mutable dictionary to the key/value pairs matching the block.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A BOOL-returning code block for a key/value pair. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>&lt;NSMapTable(BlocksKit)&gt;<ref refid="category_____g_e_n_e_r_i_c_s_07_n_s_map_table_key_type_object_type_08_1a92017021c51283a91bfde06de43eea8c" kindref="member">- bk_reject:</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSMapTable+BlocksKit.h" line="11" column="1"/>
      </memberdef>
      <memberdef kind="function" id="category_____g_e_n_e_r_i_c_s_07_n_s_map_table_key_type_object_type_08_1aac1da82a79e0620f6c1a44300242ee1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void __GENERICS(NSMapTableKeyTypeObjectType)::bk_performReject:</definition>
        <argsstring>(BOOL(^block)(KeyType key, ObjectType obj))</argsstring>
        <name>bk_performReject:</name>
        <param>
          <type>BOOL(^)(KeyType key, ObjectType obj)</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Filters a mutable dictionary to the key/value pairs not matching the block, the logical inverse to bk_select:.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A BOOL-returning code block for a key/value pair. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>&lt;NSMapTable(BlocksKit)&gt;<ref refid="category_____g_e_n_e_r_i_c_s_07_n_s_map_table_key_type_object_type_08_1af7ec0e91b83a98ee3e1e5fced676392c" kindref="member">- bk_select:</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSMapTable+BlocksKit.h" line="11" column="1"/>
      </memberdef>
      <memberdef kind="function" id="category_____g_e_n_e_r_i_c_s_07_n_s_map_table_key_type_object_type_08_1a3dde5abd4c18bda007d7b2eb12ce5ae9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void __GENERICS(NSMapTableKeyTypeObjectType)::bk_performMap:</definition>
        <argsstring>(id(^block)(KeyType key, ObjectType obj))</argsstring>
        <name>bk_performMap:</name>
        <param>
          <type>id(^)(KeyType key, ObjectType obj)</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Transform each value of the dictionary to a new value, as returned by the block.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A block that returns a new value for a given key/value pair. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>&lt;NSMapTable(BlocksKit)&gt;<ref refid="category_____g_e_n_e_r_i_c_s_07_n_s_map_table_key_type_object_type_08_1a03962f24a1a525a4edf015bcc12d306a" kindref="member">- bk_map:</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSMapTable+BlocksKit.h" line="11" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSMapTable+BlocksKit.h" line="11" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSMapTable+BlocksKit.h" bodystart="11" bodyend="-1"/>
    <listofallmembers>
      <member refid="category_____g_e_n_e_r_i_c_s_07_n_s_map_table_key_type_object_type_08_1a775a0fc5ecd8216ea321e859256e4868" prot="public" virt="virtual"><scope>__GENERICS(NSMapTableKeyTypeObjectType)</scope><name>bk_all:</name></member>
      <member refid="category_____g_e_n_e_r_i_c_s_07_n_s_map_table_key_type_object_type_08_1a633c19cac0d94fab1134ef814425b52e" prot="public" virt="virtual"><scope>__GENERICS(NSMapTableKeyTypeObjectType)</scope><name>bk_any:</name></member>
      <member refid="category_____g_e_n_e_r_i_c_s_07_n_s_map_table_key_type_object_type_08_1a8713921d6e078653d62734924ba5e8b2" prot="public" virt="virtual"><scope>__GENERICS(NSMapTableKeyTypeObjectType)</scope><name>bk_each:</name></member>
      <member refid="category_____g_e_n_e_r_i_c_s_07_n_s_map_table_key_type_object_type_08_1a03962f24a1a525a4edf015bcc12d306a" prot="public" virt="virtual"><scope>__GENERICS(NSMapTableKeyTypeObjectType)</scope><name>bk_map:</name></member>
      <member refid="category_____g_e_n_e_r_i_c_s_07_n_s_map_table_key_type_object_type_08_1a6b6f66e009f28f2b5c01609372967a43" prot="public" virt="virtual"><scope>__GENERICS(NSMapTableKeyTypeObjectType)</scope><name>bk_match:</name></member>
      <member refid="category_____g_e_n_e_r_i_c_s_07_n_s_map_table_key_type_object_type_08_1a466f63c15a9126877a6ba4d1199ff1ca" prot="public" virt="virtual"><scope>__GENERICS(NSMapTableKeyTypeObjectType)</scope><name>bk_none:</name></member>
      <member refid="category_____g_e_n_e_r_i_c_s_07_n_s_map_table_key_type_object_type_08_1a3dde5abd4c18bda007d7b2eb12ce5ae9" prot="public" virt="virtual"><scope>__GENERICS(NSMapTableKeyTypeObjectType)</scope><name>bk_performMap:</name></member>
      <member refid="category_____g_e_n_e_r_i_c_s_07_n_s_map_table_key_type_object_type_08_1aac1da82a79e0620f6c1a44300242ee1f" prot="public" virt="virtual"><scope>__GENERICS(NSMapTableKeyTypeObjectType)</scope><name>bk_performReject:</name></member>
      <member refid="category_____g_e_n_e_r_i_c_s_07_n_s_map_table_key_type_object_type_08_1a440061820b496a3d7ecac4cd7190640b" prot="public" virt="virtual"><scope>__GENERICS(NSMapTableKeyTypeObjectType)</scope><name>bk_performSelect:</name></member>
      <member refid="category_____g_e_n_e_r_i_c_s_07_n_s_map_table_key_type_object_type_08_1a92017021c51283a91bfde06de43eea8c" prot="public" virt="virtual"><scope>__GENERICS(NSMapTableKeyTypeObjectType)</scope><name>bk_reject:</name></member>
      <member refid="category_____g_e_n_e_r_i_c_s_07_n_s_map_table_key_type_object_type_08_1af7ec0e91b83a98ee3e1e5fced676392c" prot="public" virt="virtual"><scope>__GENERICS(NSMapTableKeyTypeObjectType)</scope><name>bk_select:</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
