<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="category_____g_e_n_e_r_i_c_s_07_n_s_set_object_type_08" kind="category" language="Objective-C" prot="public">
    <compoundname>__GENERICS(NSSetObjectType)</compoundname>
    <includes refid="_n_s_set_09_blocks_kit_8h" local="no">NSSet+BlocksKit.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="category_____g_e_n_e_r_i_c_s_07_n_s_set_object_type_08_1a0bc93ea46e72f0243ee841ff6edff6e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void __GENERICS(NSSetObjectType)::bk_each:</definition>
        <argsstring>(void(^block)(ObjectType obj))</argsstring>
        <name>bk_each:</name>
        <param>
          <type>void(^)(ObjectType obj)</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loops through a set and executes the given block with each object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A single-argument, void-returning code block. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSSet+BlocksKit.h" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="category_____g_e_n_e_r_i_c_s_07_n_s_set_object_type_08_1a1b27af5bd97fdcb9668cdc6058b43af8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void __GENERICS(NSSetObjectType)::bk_apply:</definition>
        <argsstring>(void(^block)(ObjectType obj))</argsstring>
        <name>bk_apply:</name>
        <param>
          <type>void(^)(ObjectType obj)</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enumerates through a set concurrently and executes the given block once for each object.</para><para>Enumeration will occur on appropriate background queues. This will have a noticeable speed increase, especially on dual-core devices, but you <emphasis>must</emphasis> be aware of the thread safety of the objects you message from within the block.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A single-argument, void-returning code block. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSSet+BlocksKit.h" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="category_____g_e_n_e_r_i_c_s_07_n_s_set_object_type_08_1a8eed10c53195f12530ac0a65d46cc9a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="_b_k_defines_8h_1a02648067ad66739ed70a10195891098a" kindref="member">nullable</ref> id</type>
        <definition>nullable id __GENERICS(NSSetObjectType)::bk_match:</definition>
        <argsstring>(BOOL(^block)(ObjectType obj))</argsstring>
        <name>bk_match:</name>
        <param>
          <type>BOOL(^)(ObjectType obj)</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loops through a set to find the object matching the block.</para><para>bk_match: is functionally identical to bk_select:, but will stop and return on the first match.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A single-argument, BOOL-returning code block. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the object if found, <computeroutput>nil</computeroutput> otherwise. </para></simplesect>
<simplesect kind="see"><para><ref refid="category_____g_e_n_e_r_i_c_s_07_n_s_set_object_type_08_1a5233fe7488b48bcf98e052f1c476aae8" kindref="member">- bk_select:</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSSet+BlocksKit.h" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="category_____g_e_n_e_r_i_c_s_07_n_s_set_object_type_08_1a5233fe7488b48bcf98e052f1c476aae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>NSSet *</type>
        <definition>NSSet * __GENERICS(NSSetObjectType)::bk_select:</definition>
        <argsstring>(BOOL(^block)(ObjectType obj))</argsstring>
        <name>bk_select:</name>
        <param>
          <type>BOOL(^)(ObjectType obj)</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loops through a set to find the objects matching the block.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A single-argument, BOOL-returning code block. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a set of the objects found. </para></simplesect>
<simplesect kind="see"><para><ref refid="category_____g_e_n_e_r_i_c_s_07_n_s_set_object_type_08_1a8eed10c53195f12530ac0a65d46cc9a4" kindref="member">- bk_match:</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSSet+BlocksKit.h" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="category_____g_e_n_e_r_i_c_s_07_n_s_set_object_type_08_1acda3aff43f407c0a5934a93101cf155e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>NSSet *</type>
        <definition>NSSet * __GENERICS(NSSetObjectType)::bk_reject:</definition>
        <argsstring>(BOOL(^block)(ObjectType obj))</argsstring>
        <name>bk_reject:</name>
        <param>
          <type>BOOL(^)(ObjectType obj)</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loops through a set to find the objects not matching the block.</para><para>This selector performs <emphasis>literally</emphasis> the exact same function as select, but in reverse.</para><para>This is useful, as one may expect, for removing objects from a set: NSSet *new = [reusableWebViews bk_reject:^BOOL(id obj) { return ([obj isLoading]); }];</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A single-argument, BOOL-returning code block. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns an array of all objects not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSSet+BlocksKit.h" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="category_____g_e_n_e_r_i_c_s_07_n_s_set_object_type_08_1af7c59f6de76c9ecd420674cc6ca7ea45" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>NSSet *</type>
        <definition>NSSet * __GENERICS(NSSetObjectType)::bk_map:</definition>
        <argsstring>(id(^block)(ObjectType obj))</argsstring>
        <name>bk_map:</name>
        <param>
          <type>id(^)(ObjectType obj)</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Call the block once for each object and create a set of the return values.</para><para>This is sometimes referred to as a transform, mutating one of each object: NSSet *new = [mimeTypes bk_map:^id(id obj) { return ["x-company-" stringByAppendingString:obj]); }];</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A single-argument, object-returning code block. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a set of the objects returned by the block. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSSet+BlocksKit.h" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="category_____g_e_n_e_r_i_c_s_07_n_s_set_object_type_08_1a84032618bf2ab283eea768fa7182e38b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="_b_k_defines_8h_1a02648067ad66739ed70a10195891098a" kindref="member">nullable</ref> id</type>
        <definition>nullable id __GENERICS(NSSetObjectType)::bk_reduce:withBlock:</definition>
        <argsstring>(nullable id initial,[withBlock] __nullable id(^block)(__nullable id sum, ObjectType obj))</argsstring>
        <name>bk_reduce:withBlock:</name>
        <param>
          <type><ref refid="_b_k_defines_8h_1a02648067ad66739ed70a10195891098a" kindref="member">nullable</ref> id</type>
          <declname>initial</declname>
        </param>
        <param>
          <attributes>[withBlock]</attributes>
          <type><ref refid="_b_k_defines_8h_1adef3a2f6f7f351e138d1df7e339bc555" kindref="member">__nullable</ref> id(^)(<ref refid="_b_k_defines_8h_1adef3a2f6f7f351e138d1df7e339bc555" kindref="member">__nullable</ref> id sum, ObjectType obj)</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Arbitrarily accumulate objects using a block.</para><para>The concept of this selector is difficult to illustrate in words. The sum can be any <ref refid="class_n_s_object-p" kindref="compound">NSObject</ref>, including (but not limited to) a string, number, or value.</para><para>You can also do something like summing the count of an item: NSUInteger numberOfBodyParts = [[bodyList bk_reduce:nil withBlock:^id(id sum, id obj) { return @([sum integerValue] + obj.numberOfAppendages); }] unsignedIntegerValue];</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initial</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the reduction at its start. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A block that takes the current sum and the next object to return the new sum. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An accumulated value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSSet+BlocksKit.h" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="category_____g_e_n_e_r_i_c_s_07_n_s_set_object_type_08_1ae0f52ae05c9ec19b0e6b6d44e6a7350a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>BOOL</type>
        <definition>BOOL __GENERICS(NSSetObjectType)::bk_any:</definition>
        <argsstring>(BOOL(^block)(ObjectType obj))</argsstring>
        <name>bk_any:</name>
        <param>
          <type>BOOL(^)(ObjectType obj)</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loops through a set to find whether any object matches the block.</para><para>This method is similar to the Scala list <computeroutput>exists</computeroutput>. It is functionally identical to bk_match: but returns a <computeroutput>BOOL</computeroutput> instead. It is not recommended to use bk_any: as a check condition before executing bk_match:, since it would require two loops through the array.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A single-argument, BOOL-returning code block. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>YES for the first time the block returns YES for an object, NO otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSSet+BlocksKit.h" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="category_____g_e_n_e_r_i_c_s_07_n_s_set_object_type_08_1a56e8eb5184d19ef7aecaeeec0cde1b6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>BOOL</type>
        <definition>BOOL __GENERICS(NSSetObjectType)::bk_none:</definition>
        <argsstring>(BOOL(^block)(ObjectType obj))</argsstring>
        <name>bk_none:</name>
        <param>
          <type>BOOL(^)(ObjectType obj)</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loops through a set to find whether no objects match the block.</para><para>This selector performs <emphasis>literally</emphasis> the exact same function as bk_all: but in reverse.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A single-argument, BOOL-returning code block. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>YES if the block returns NO for all objects in the set, NO otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSSet+BlocksKit.h" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="category_____g_e_n_e_r_i_c_s_07_n_s_set_object_type_08_1ab4ffb4f3abd27b95bb315ae290fa51bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>BOOL</type>
        <definition>BOOL __GENERICS(NSSetObjectType)::bk_all:</definition>
        <argsstring>(BOOL(^block)(ObjectType obj))</argsstring>
        <name>bk_all:</name>
        <param>
          <type>BOOL(^)(ObjectType obj)</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loops through a set to find whether all objects match the block.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>A single-argument, BOOL-returning code block. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>YES if the block returns YES for all objects in the set, NO otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSSet+BlocksKit.h" line="27" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Block extensions for NSSet.</para><para>Both inspired by and resembling Smalltalk syntax, these utilities allows for iteration of a set in a logical way that saves quite a bit of boilerplate code for filtering or finding objects or an object.</para><para>Includes code by the following:</para><para><itemizedlist>
<listitem><para><ulink url="https://github.com/mikeash">Michael Ash</ulink></para></listitem><listitem><para><ulink url="https://github.com/coreyfloyd">Corey Floyd</ulink></para></listitem><listitem><para><ulink url="https://github.com/nesterow">Aleks Nesterow</ulink></para></listitem><listitem><para><ulink url="https://github.com/zwaldowski">Zach Waldowski</ulink></para><para><simplesect kind="see"><para>NSArray(BlocksKit) </para></simplesect>
<simplesect kind="see"><para>NSDictionary(BlocksKit) </para></simplesect>
</para></listitem></itemizedlist>
</para>    </detaileddescription>
    <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSSet+BlocksKit.h" line="27" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/Core/NSSet+BlocksKit.h" bodystart="27" bodyend="-1"/>
    <listofallmembers>
      <member refid="category_____g_e_n_e_r_i_c_s_07_n_s_set_object_type_08_1ab4ffb4f3abd27b95bb315ae290fa51bc" prot="public" virt="virtual"><scope>__GENERICS(NSSetObjectType)</scope><name>bk_all:</name></member>
      <member refid="category_____g_e_n_e_r_i_c_s_07_n_s_set_object_type_08_1ae0f52ae05c9ec19b0e6b6d44e6a7350a" prot="public" virt="virtual"><scope>__GENERICS(NSSetObjectType)</scope><name>bk_any:</name></member>
      <member refid="category_____g_e_n_e_r_i_c_s_07_n_s_set_object_type_08_1a1b27af5bd97fdcb9668cdc6058b43af8" prot="public" virt="virtual"><scope>__GENERICS(NSSetObjectType)</scope><name>bk_apply:</name></member>
      <member refid="category_____g_e_n_e_r_i_c_s_07_n_s_set_object_type_08_1a0bc93ea46e72f0243ee841ff6edff6e1" prot="public" virt="virtual"><scope>__GENERICS(NSSetObjectType)</scope><name>bk_each:</name></member>
      <member refid="category_____g_e_n_e_r_i_c_s_07_n_s_set_object_type_08_1af7c59f6de76c9ecd420674cc6ca7ea45" prot="public" virt="virtual"><scope>__GENERICS(NSSetObjectType)</scope><name>bk_map:</name></member>
      <member refid="category_____g_e_n_e_r_i_c_s_07_n_s_set_object_type_08_1a8eed10c53195f12530ac0a65d46cc9a4" prot="public" virt="virtual"><scope>__GENERICS(NSSetObjectType)</scope><name>bk_match:</name></member>
      <member refid="category_____g_e_n_e_r_i_c_s_07_n_s_set_object_type_08_1a56e8eb5184d19ef7aecaeeec0cde1b6f" prot="public" virt="virtual"><scope>__GENERICS(NSSetObjectType)</scope><name>bk_none:</name></member>
      <member refid="category_____g_e_n_e_r_i_c_s_07_n_s_set_object_type_08_1a84032618bf2ab283eea768fa7182e38b" prot="public" virt="virtual"><scope>__GENERICS(NSSetObjectType)</scope><name>bk_reduce:withBlock:</name></member>
      <member refid="category_____g_e_n_e_r_i_c_s_07_n_s_set_object_type_08_1acda3aff43f407c0a5934a93101cf155e" prot="public" virt="virtual"><scope>__GENERICS(NSSetObjectType)</scope><name>bk_reject:</name></member>
      <member refid="category_____g_e_n_e_r_i_c_s_07_n_s_set_object_type_08_1a5233fe7488b48bcf98e052f1c476aae8" prot="public" virt="virtual"><scope>__GENERICS(NSSetObjectType)</scope><name>bk_select:</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
