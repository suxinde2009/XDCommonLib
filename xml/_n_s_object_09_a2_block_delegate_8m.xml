<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="_n_s_object_09_a2_block_delegate_8m" kind="file" language="Objective-C">
    <compoundname>NSObject+A2BlockDelegate.m</compoundname>
    <includes refid="_n_s_object_09_a2_block_delegate_8h" local="yes">NSObject+A2BlockDelegate.h</includes>
    <includes refid="_a2_dynamic_delegate_8h" local="yes">A2DynamicDelegate.h</includes>
    <includes refid="_n_s_object_09_a2_dynamic_delegate_8h" local="yes">NSObject+A2DynamicDelegate.h</includes>
    <incdepgraph>
      <node id="2946">
        <label>A2DynamicDelegate.h</label>
        <link refid="_a2_dynamic_delegate_8h"/>
        <childnode refid="2943" relation="include">
        </childnode>
        <childnode refid="2945" relation="include">
        </childnode>
      </node>
      <node id="2944">
        <label>Foundation/NSObjCRuntime.h</label>
      </node>
      <node id="2947">
        <label>NSObject+A2DynamicDelegate.h</label>
        <link refid="_n_s_object_09_a2_dynamic_delegate_8h"/>
        <childnode refid="2943" relation="include">
        </childnode>
        <childnode refid="2945" relation="include">
        </childnode>
      </node>
      <node id="2943">
        <label>BKDefines.h</label>
        <link refid="_b_k_defines_8h"/>
        <childnode refid="2944" relation="include">
        </childnode>
      </node>
      <node id="2942">
        <label>NSObject+A2BlockDelegate.h</label>
        <link refid="_n_s_object_09_a2_block_delegate_8h"/>
        <childnode refid="2943" relation="include">
        </childnode>
        <childnode refid="2945" relation="include">
        </childnode>
      </node>
      <node id="2941">
        <label>XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m</label>
        <link refid="NSObject+A2BlockDelegate.m"/>
        <childnode refid="2942" relation="include">
        </childnode>
        <childnode refid="2946" relation="include">
        </childnode>
        <childnode refid="2947" relation="include">
        </childnode>
      </node>
      <node id="2945">
        <label>Foundation/Foundation.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_a2_block_delegate_info" prot="public">A2BlockDelegateInfo</innerclass>
    <innerclass refid="category_a2_dynamic_delegate_07_08" prot="public">A2DynamicDelegate()</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_n_s_object_09_a2_block_delegate_8m_1a25f94fb6a360ba48a1c9c17679e51852" prot="public" static="no">
        <type><ref refid="class_a2_dynamic_delegate" kindref="compound">A2DynamicDelegate</ref> *(^</type>
        <definition>typedef A2DynamicDelegate*(^ A2GetDynamicDelegateBlock) (NSObject *, BOOL)</definition>
        <argsstring>)(NSObject *, BOOL)</argsstring>
        <name>A2GetDynamicDelegateBlock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m" line="193" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m" bodystart="193" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_n_s_object_09_a2_block_delegate_8m_1a19dd2af25ac6d5ede1801fd092465656" prot="public" static="no" mutable="no">
        <type>import ObjectiveC</type>
        <definition>import ObjectiveC message</definition>
        <argsstring></argsstring>
        <name>message</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m" line="7" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m" bodystart="7" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_n_s_object_09_a2_block_delegate_8m_1a69002dc9b55486c0431b70eb5c05316f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Protocol *</type>
        <definition>Protocol* a2_dataSourceProtocol</definition>
        <argsstring>(Class cls)</argsstring>
        <name>a2_dataSourceProtocol</name>
        <param>
          <type>Class</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m" line="13" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/A2DynamicDelegate.m" bodystart="330" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="_n_s_object_09_a2_block_delegate_8m_1a3a6f9f96f1c68dbb681a7b6c9f22efcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Protocol *</type>
        <definition>Protocol* a2_delegateProtocol</definition>
        <argsstring>(Class cls)</argsstring>
        <name>a2_delegateProtocol</name>
        <param>
          <type>Class</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m" line="14" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/A2DynamicDelegate.m" bodystart="334" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="_n_s_object_09_a2_block_delegate_8m_1ab0e9caf0f54b6e93b03418247badaef8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>static BOOL bk_object_isKindOfClass</definition>
        <argsstring>(id obj, Class testClass)</argsstring>
        <name>bk_object_isKindOfClass</name>
        <param>
          <type>id</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>Class</type>
          <declname>testClass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m" line="18" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m" bodystart="18" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="_n_s_object_09_a2_block_delegate_8m_1aa8fd31121a0fa79cc46ab2e4bff8b0ee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Protocol *</type>
        <definition>static Protocol* a2_protocolForDelegatingObject</definition>
        <argsstring>(id obj, Protocol *protocol)</argsstring>
        <name>a2_protocolForDelegatingObject</name>
        <param>
          <type>id</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>Protocol *</type>
          <declname>protocol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m" line="30" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m" bodystart="30" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="_n_s_object_09_a2_block_delegate_8m_1ab308360bc9d100034d09318b48ddc945" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>BOOL</type>
        <definition>static BOOL isValidIMP</definition>
        <argsstring>(IMP impl)</argsstring>
        <name>isValidIMP</name>
        <param>
          <type>IMP</type>
          <declname>impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m" line="44" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m" bodystart="44" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="_n_s_object_09_a2_block_delegate_8m_1afc22c3fd06364404b1f8450f426bf6d0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>static BOOL addMethodWithIMP</definition>
        <argsstring>(Class cls, SEL oldSel, SEL newSel, IMP newIMP, const char *types, BOOL aggressive)</argsstring>
        <name>addMethodWithIMP</name>
        <param>
          <type>Class</type>
          <declname>cls</declname>
        </param>
        <param>
          <type>SEL</type>
          <declname>oldSel</declname>
        </param>
        <param>
          <type>SEL</type>
          <declname>newSel</declname>
        </param>
        <param>
          <type>IMP</type>
          <declname>newIMP</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>types</declname>
        </param>
        <param>
          <type>BOOL</type>
          <declname>aggressive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m" line="53" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m" bodystart="53" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="_n_s_object_09_a2_block_delegate_8m_1a25febc8acc7d48c541bbcefd53836d01" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>static BOOL swizzleWithIMP</definition>
        <argsstring>(Class cls, SEL oldSel, SEL newSel, IMP newIMP, const char *types, BOOL aggressive)</argsstring>
        <name>swizzleWithIMP</name>
        <param>
          <type>Class</type>
          <declname>cls</declname>
        </param>
        <param>
          <type>SEL</type>
          <declname>oldSel</declname>
        </param>
        <param>
          <type>SEL</type>
          <declname>newSel</declname>
        </param>
        <param>
          <type>IMP</type>
          <declname>newIMP</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>types</declname>
        </param>
        <param>
          <type>BOOL</type>
          <declname>aggressive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m" line="86" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m" bodystart="86" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="_n_s_object_09_a2_block_delegate_8m_1a7af3d965760892f1bea2c18e77d7c337" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SEL</type>
        <definition>static SEL selectorWithPattern</definition>
        <argsstring>(const char *prefix, const char *key, const char *suffix)</argsstring>
        <name>selectorWithPattern</name>
        <param>
          <type>const char *</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>suffix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m" line="100" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m" bodystart="100" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="_n_s_object_09_a2_block_delegate_8m_1a0772853586789b04c91fd20542516265" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SEL</type>
        <definition>static SEL getterForProperty</definition>
        <argsstring>(objc_property_t property, const char *name)</argsstring>
        <name>getterForProperty</name>
        <param>
          <type>objc_property_t</type>
          <declname>property</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m" line="121" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m" bodystart="121" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="_n_s_object_09_a2_block_delegate_8m_1a2ad4e8db4cc120e136b25dda06697eab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SEL</type>
        <definition>static SEL setterForProperty</definition>
        <argsstring>(objc_property_t property, const char *name)</argsstring>
        <name>setterForProperty</name>
        <param>
          <type>objc_property_t</type>
          <declname>property</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m" line="136" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m" bodystart="136" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="_n_s_object_09_a2_block_delegate_8m_1a9b04b7d9c0211eea40dd045e8bd1cd2c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SEL</type>
        <definition>static SEL prefixedSelector</definition>
        <argsstring>(SEL original)</argsstring>
        <name>prefixedSelector</name>
        <param>
          <type>SEL</type>
          <declname>original</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m" line="151" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m" bodystart="151" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="_n_s_object_09_a2_block_delegate_8m_1afdd26403d4a2966fdb4ea035ab75b606" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NSUInteger</type>
        <definition>static NSUInteger A2BlockDelegateInfoSize</definition>
        <argsstring>(const void *__unused item)</argsstring>
        <name>A2BlockDelegateInfoSize</name>
        <param>
          <type>const void *__unused</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m" line="163" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m" bodystart="163" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="_n_s_object_09_a2_block_delegate_8m_1a6bd6c0b1fdc64d0a82c863a7ae43eb3a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NSString *</type>
        <definition>static NSString* A2BlockDelegateInfoDescribe</definition>
        <argsstring>(const void *__unused item)</argsstring>
        <name>A2BlockDelegateInfoDescribe</name>
        <param>
          <type>const void *__unused</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m" line="167" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m" bodystart="167" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="_n_s_object_09_a2_block_delegate_8m_1a3d2fd946dc549ed31bcd2b37b75e14dc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_a2_dynamic_delegate" kindref="compound">A2DynamicDelegate</ref> *</type>
        <definition>static A2DynamicDelegate* getDynamicDelegate</definition>
        <argsstring>(NSObject *delegatingObject, Protocol *protocol, const A2BlockDelegateInfo *info, BOOL ensuring)</argsstring>
        <name>getDynamicDelegate</name>
        <param>
          <type>NSObject *</type>
          <declname>delegatingObject</declname>
        </param>
        <param>
          <type>Protocol *</type>
          <declname>protocol</declname>
        </param>
        <param>
          <type>const <ref refid="struct_a2_block_delegate_info" kindref="compound">A2BlockDelegateInfo</ref> *</type>
          <declname>info</declname>
        </param>
        <param>
          <type>BOOL</type>
          <declname>ensuring</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m" line="173" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m" bodystart="173" bodyend="191"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>NSObject+A2BlockDelegate.m</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>BlocksKit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#import<sp/>&quot;<ref refid="_n_s_object_09_a2_block_delegate_8h" kindref="compound">NSObject+A2BlockDelegate.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="_n_s_object_09_a2_block_delegate_8m_1a19dd2af25ac6d5ede1801fd092465656" refkind="member"><highlight class="normal">@</highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>ObjectiveC.message;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#import<sp/>&quot;<ref refid="_a2_dynamic_delegate_8h" kindref="compound">A2DynamicDelegate.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#import<sp/>&quot;<ref refid="_n_s_object_09_a2_dynamic_delegate_8h" kindref="compound">NSObject+A2DynamicDelegate.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>mark<sp/>-<sp/>Declarations<sp/>and<sp/>macros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Protocol<sp/>*<ref refid="_n_s_object_09_a2_block_delegate_8m_1a69002dc9b55486c0431b70eb5c05316f" kindref="member">a2_dataSourceProtocol</ref>(Class<sp/>cls);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Protocol<sp/>*<ref refid="_n_s_object_09_a2_block_delegate_8m_1a3a6f9f96f1c68dbb681a7b6c9f22efcf" kindref="member">a2_delegateProtocol</ref>(Class<sp/>cls);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>mark<sp/>-<sp/>Functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOL<sp/>bk_object_isKindOfClass(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>obj,<sp/>Class<sp/>testClass)</highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOL<sp/>isKindOfClass<sp/>=<sp/>NO;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>Class<sp/>cls<sp/>=<sp/>object_getClass(obj);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(cls<sp/>&amp;&amp;<sp/>!isKindOfClass)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isKindOfClass<sp/>=<sp/>(cls<sp/>==<sp/>testClass);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cls<sp/>=<sp/>class_getSuperclass(cls);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isKindOfClass;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Protocol<sp/>*<ref refid="_a2_dynamic_delegate_8m_1ab9f5debbd1b89dec734f9782c35fa32e" kindref="member">a2_protocolForDelegatingObject</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>obj,<sp/>Protocol<sp/>*protocol)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>NSString<sp/>*protocolName<sp/>=<sp/>NSStringFromProtocol(protocol);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>([protocolName<sp/>hasSuffix:</highlight><highlight class="stringliteral">@&quot;Delegate&quot;</highlight><highlight class="normal">])<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Protocol<sp/>*p<sp/>=<sp/><ref refid="_n_s_object_09_a2_block_delegate_8m_1a3a6f9f96f1c68dbb681a7b6c9f22efcf" kindref="member">a2_delegateProtocol</ref>([obj<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>([protocolName<sp/>hasSuffix:</highlight><highlight class="stringliteral">@&quot;DataSource&quot;</highlight><highlight class="normal">])<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Protocol<sp/>*p<sp/>=<sp/><ref refid="_n_s_object_09_a2_block_delegate_8m_1a69002dc9b55486c0431b70eb5c05316f" kindref="member">a2_dataSourceProtocol</ref>([obj<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>protocol;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>BOOL<sp/>isValidIMP(IMP<sp/>impl)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__arm64__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(impl<sp/>==<sp/>NULL<sp/>||<sp/>impl<sp/>==<sp/>_objc_msgForward)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NO;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(impl<sp/>==<sp/>NULL<sp/>||<sp/>impl<sp/>==<sp/>_objc_msgForward<sp/>||<sp/>impl<sp/>==<sp/>(IMP)_objc_msgForward_stret)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NO;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>YES;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOL<sp/>addMethodWithIMP(Class<sp/>cls,<sp/></highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal"><sp/>oldSel,<sp/></highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal"><sp/>newSel,<sp/>IMP<sp/>newIMP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*types,<sp/>BOOL<sp/>aggressive)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!class_addMethod(cls,<sp/>oldSel,<sp/>newIMP,<sp/>types))<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NO;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>just<sp/>ended<sp/>up<sp/>implementing<sp/>a<sp/>method<sp/>that<sp/>doesn&apos;t<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(-[NSURLConnection<sp/>setDelegate:])<sp/>or<sp/>overrode<sp/>a<sp/>superclass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>version<sp/>(-[UIImagePickerController<sp/>setDelegate:]).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>IMP<sp/>parentIMP<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>Class<sp/>superclass<sp/>=<sp/>class_getSuperclass(cls);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(superclass<sp/>&amp;&amp;<sp/>!isValidIMP(parentIMP))<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parentIMP<sp/>=<sp/>class_getMethodImplementation(superclass,<sp/>oldSel);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isValidIMP(parentIMP))<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parentIMP<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>superclass<sp/>=<sp/>class_getSuperclass(superclass);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parentIMP)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aggressive)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>class_addMethod(cls,<sp/>newSel,<sp/>parentIMP,<sp/>types);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_replaceMethod(cls,<sp/>newSel,<sp/>newIMP,<sp/>types);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_replaceMethod(cls,<sp/>oldSel,<sp/>parentIMP,<sp/>types);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>YES;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOL<sp/>swizzleWithIMP(Class<sp/>cls,<sp/></highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal"><sp/>oldSel,<sp/></highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal"><sp/>newSel,<sp/>IMP<sp/>newIMP,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*types,<sp/>BOOL<sp/>aggressive)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>Method<sp/>origMethod<sp/>=<sp/>class_getInstanceMethod(cls,<sp/>oldSel);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addMethodWithIMP(cls,<sp/>oldSel,<sp/>newSel,<sp/>newIMP,<sp/>types,<sp/>aggressive))<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>YES;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>common<sp/>case,<sp/>actual<sp/>swap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOL<sp/>ret<sp/>=<sp/>class_addMethod(cls,<sp/>newSel,<sp/>newIMP,<sp/>types);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>Method<sp/>newMethod<sp/>=<sp/>class_getInstanceMethod(cls,<sp/>newSel);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>method_exchangeImplementations(origMethod,<sp/>newMethod);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal"><sp/>selectorWithPattern(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prefix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*suffix)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>prefixLength<sp/>=<sp/>prefix<sp/>?<sp/>strlen(prefix)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>suffixLength<sp/>=<sp/>suffix<sp/>?<sp/>strlen(suffix)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>initial<sp/>=<sp/>key[0];</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prefixLength)<sp/>initial<sp/>=<sp/>(char)toupper(initial);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>initialLength<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*rest<sp/>=<sp/>key<sp/>+<sp/>initialLength;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>restLength<sp/>=<sp/>strlen(rest);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>selector[prefixLength<sp/>+<sp/>initialLength<sp/>+<sp/>restLength<sp/>+<sp/>suffixLength<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(selector,<sp/>prefix,<sp/>prefixLength);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>selector[prefixLength]<sp/>=<sp/>initial;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(selector<sp/>+<sp/>prefixLength<sp/>+<sp/>initialLength,<sp/>rest,<sp/>restLength);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(selector<sp/>+<sp/>prefixLength<sp/>+<sp/>initialLength<sp/>+<sp/>restLength,<sp/>suffix,<sp/>suffixLength);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>selector[prefixLength<sp/>+<sp/>initialLength<sp/>+<sp/>restLength<sp/>+<sp/>suffixLength]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sel_registerName(selector);</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal"><sp/>getterForProperty(objc_property_t<sp/>property,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(property)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*getterName<sp/>=<sp/>property_copyAttributeValue(property,<sp/></highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getterName)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal"><sp/>getter<sp/>=<sp/>sel_getUid(getterName);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(getterName);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getter)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getter;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*propertyName<sp/>=<sp/></highlight><highlight class="keyword">property</highlight><highlight class="normal"><sp/>?<sp/>property_getName(property)<sp/>:<sp/>name;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sel_registerName(propertyName);</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal"><sp/>setterForProperty(objc_property_t<sp/>property,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(property)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*setterName<sp/>=<sp/>property_copyAttributeValue(property,<sp/></highlight><highlight class="stringliteral">&quot;S&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setterName)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal"><sp/>setter<sp/>=<sp/>sel_getUid(setterName);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(setterName);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setter)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setter;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*propertyName<sp/>=<sp/></highlight><highlight class="keyword">property</highlight><highlight class="normal"><sp/>?<sp/>property_getName(property)<sp/>:<sp/>name;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>selectorWithPattern(</highlight><highlight class="stringliteral">&quot;set&quot;</highlight><highlight class="normal">,<sp/>propertyName,<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal"><sp/>prefixedSelector(</highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal"><sp/>original)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>selectorWithPattern(</highlight><highlight class="stringliteral">&quot;a2_&quot;</highlight><highlight class="normal">,<sp/>sel_getName(original),<sp/>NULL);</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>mark<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="struct_a2_block_delegate_info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="158" refid="struct_a2_block_delegate_info_1ab5c4675910eefd51cd90b340391f9640" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal"><sp/><ref refid="struct_a2_block_delegate_info_1ab5c4675910eefd51cd90b340391f9640" kindref="member">setter</ref>;</highlight></codeline>
<codeline lineno="159" refid="struct_a2_block_delegate_info_1a5aae26007268a67e7a15b6bcbb0be1c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal"><sp/><ref refid="struct_a2_block_delegate_info_1a5aae26007268a67e7a15b6bcbb0be1c1" kindref="member">a2_setter</ref>;</highlight></codeline>
<codeline lineno="160" refid="struct_a2_block_delegate_info_1a180a95ee010a44ffec60d1b770dc03d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal"><sp/><ref refid="struct_a2_block_delegate_info_1a180a95ee010a44ffec60d1b770dc03d8" kindref="member">getter</ref>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}<sp/><ref refid="struct_a2_block_delegate_info" kindref="compound">A2BlockDelegateInfo</ref>;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>NSUInteger<sp/>A2BlockDelegateInfoSize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*__unused<sp/>item)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_a2_block_delegate_info" kindref="compound">A2BlockDelegateInfo</ref>);</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>NSString<sp/>*A2BlockDelegateInfoDescribe(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*__unused<sp/>item)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!item)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nil;<sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_a2_block_delegate_info" kindref="compound">A2BlockDelegateInfo</ref><sp/>*info<sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[NSString<sp/>stringWithFormat:@&quot;(setter:<sp/>%s,<sp/>getter:<sp/>%s)&quot;,<sp/>sel_getName(info-&gt;setter),<sp/>sel_getName(info-&gt;getter)];</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_a2_dynamic_delegate" kindref="compound">A2DynamicDelegate</ref><sp/>*getDynamicDelegate(NSObject<sp/>*delegatingObject,<sp/>Protocol<sp/>*protocol,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_a2_block_delegate_info" kindref="compound">A2BlockDelegateInfo</ref><sp/>*info,<sp/>BOOL<sp/>ensuring)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_a2_dynamic_delegate" kindref="compound">A2DynamicDelegate</ref><sp/>*dynamicDelegate<sp/>=<sp/>[delegatingObject<sp/>bk_dynamicDelegateForProtocol:a2_protocolForDelegatingObject(delegatingObject,<sp/>protocol)];</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!info<sp/>||<sp/>!info-&gt;<ref refid="struct_a2_block_delegate_info_1ab5c4675910eefd51cd90b340391f9640" kindref="member">setter</ref><sp/>||<sp/>!info-&gt;<ref refid="struct_a2_block_delegate_info_1a180a95ee010a44ffec60d1b770dc03d8" kindref="member">getter</ref>)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dynamicDelegate;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!info-&gt;<ref refid="struct_a2_block_delegate_info_1a5aae26007268a67e7a15b6bcbb0be1c1" kindref="member">a2_setter</ref><sp/>&amp;&amp;<sp/>!info-&gt;<ref refid="struct_a2_block_delegate_info_1ab5c4675910eefd51cd90b340391f9640" kindref="member">setter</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dynamicDelegate;<sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>id<sp/>(*getterDispatch)(id,<sp/>SEL)<sp/>=<sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>(*)(id,<sp/>SEL))<sp/>objc_msgSend;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>originalDelegate<sp/>=<sp/>getterDispatch(delegatingObject,<sp/>info-&gt;<ref refid="struct_a2_block_delegate_info_1a180a95ee010a44ffec60d1b770dc03d8" kindref="member">getter</ref>);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bk_object_isKindOfClass(originalDelegate,<sp/><ref refid="class_a2_dynamic_delegate" kindref="compound">A2DynamicDelegate</ref>.class))<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dynamicDelegate;<sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*setterDispatch)(id,<sp/>SEL,<sp/>id)<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*)(id,<sp/>SEL,<sp/>id))<sp/>objc_msgSend;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>setterDispatch(delegatingObject,<sp/>info-&gt;<ref refid="struct_a2_block_delegate_info_1a5aae26007268a67e7a15b6bcbb0be1c1" kindref="member">a2_setter</ref><sp/>?:<sp/>info-&gt;<ref refid="struct_a2_block_delegate_info_1ab5c4675910eefd51cd90b340391f9640" kindref="member">setter</ref>,<sp/>dynamicDelegate);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dynamicDelegate;</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="_n_s_object_09_a2_block_delegate_8m_1a25f94fb6a360ba48a1c9c17679e51852" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_a2_dynamic_delegate" kindref="compound">A2DynamicDelegate</ref><sp/>*(^<ref refid="_n_s_object_09_a2_block_delegate_8m_1a25f94fb6a360ba48a1c9c17679e51852" kindref="member">A2GetDynamicDelegateBlock</ref>)(NSObject<sp/>*,<sp/>BOOL);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="keyword">@interface<sp/></highlight><highlight class="normal"><ref refid="class_a2_dynamic_delegate" kindref="compound">A2DynamicDelegate</ref><sp/>()</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">@property</highlight><highlight class="normal"><sp/>(nonatomic,<sp/>weak,<sp/>readwrite)<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/><ref refid="class_a2_dynamic_delegate_1a4c7e2f4153dc34cc4c05a72d1647d62c" kindref="member">realDelegate</ref>;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">@end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>mark<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keyword">@implementation<sp/></highlight><highlight class="normal"><ref refid="category_n_s_object_07_a2_block_delegate_08" kindref="compound">NSObject (A2BlockDelegate)</ref></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>mark<sp/>Helpers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal">+<sp/>(NSMapTable<sp/>*)bk_delegateInfoByProtocol:(BOOL)createIfNeeded</highlight></codeline>
<codeline lineno="208"><highlight class="normal">{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>NSMapTable<sp/>*delegateInfo<sp/>=<sp/>objc_getAssociatedObject(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>_cmd);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delegateInfo<sp/>||<sp/>!createIfNeeded)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>delegateInfo;<sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>NSPointerFunctions<sp/>*protocols<sp/>=<sp/>[NSPointerFunctions<sp/>pointerFunctionsWithOptions:NSPointerFunctionsOpaqueMemory|NSPointerFunctionsObjectPointerPersonality];</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>NSPointerFunctions<sp/>*infoStruct<sp/>=<sp/>[NSPointerFunctions<sp/>pointerFunctionsWithOptions:NSPointerFunctionsMallocMemory|NSPointerFunctionsStructPersonality|NSPointerFunctionsCopyIn];</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>infoStruct.sizeFunction<sp/>=<sp/>A2BlockDelegateInfoSize;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>infoStruct.descriptionFunction<sp/>=<sp/>A2BlockDelegateInfoDescribe;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>delegateInfo<sp/>=<sp/>[[NSMapTable<sp/>alloc]<sp/>initWithKeyPointerFunctions:protocols<sp/>valuePointerFunctions:infoStruct<sp/>capacity:0];</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>objc_setAssociatedObject(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>_cmd,<sp/>delegateInfo,<sp/>OBJC_ASSOCIATION_RETAIN_NONATOMIC);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>delegateInfo;</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal">+<sp/>(const<sp/><ref refid="struct_a2_block_delegate_info" kindref="compound">A2BlockDelegateInfo</ref><sp/>*)bk_delegateInfoForProtocol:(Protocol<sp/>*)protocol</highlight></codeline>
<codeline lineno="224"><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a2_block_delegate_info" kindref="compound">A2BlockDelegateInfo</ref><sp/>*infoAsPtr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>Class<sp/>cls<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((infoAsPtr<sp/>==<sp/>NULL<sp/>||<sp/>infoAsPtr-&gt;<ref refid="struct_a2_block_delegate_info_1a180a95ee010a44ffec60d1b770dc03d8" kindref="member">getter</ref><sp/>==<sp/>NULL)<sp/>&amp;&amp;<sp/>cls<sp/>!=<sp/>nil<sp/>&amp;&amp;<sp/>cls<sp/>!=<sp/>NSObject.class)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NSMapTable<sp/>*map<sp/>=<sp/>[cls<sp/>bk_delegateInfoByProtocol:NO];</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infoAsPtr<sp/>=<sp/>(__bridge<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)[map<sp/>objectForKey:protocol];</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cls<sp/>=<sp/>[cls<sp/>superclass];</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>NSCAssert(infoAsPtr<sp/>!=<sp/>NULL,<sp/></highlight><highlight class="stringliteral">@&quot;Class<sp/>%@<sp/>not<sp/>assigned<sp/>dynamic<sp/>delegate<sp/>for<sp/>protocol<sp/>%@&quot;</highlight><highlight class="normal">,<sp/>NSStringFromClass(</highlight><highlight class="keyword">self</highlight><highlight class="normal">),<sp/>NSStringFromProtocol(protocol));</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>infoAsPtr;</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>mark<sp/>Linking<sp/>block<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="category_n_s_object_07_a2_block_delegate_08_1a694b8a55bb0c89ed8e510234c30aa33e" refkind="member"><highlight class="normal">+<sp/>(void)bk_linkDataSourceMethods:(NSDictionary<sp/>*)dictionary</highlight></codeline>
<codeline lineno="239"><highlight class="normal">{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>bk_linkProtocol:a2_dataSourceProtocol(self)<sp/>methods:dictionary];</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243" refid="category_n_s_object_07_a2_block_delegate_08_1a3be921de9a70e337b5c86cc9d251a7c5" refkind="member"><highlight class="normal">+<sp/>(void)bk_linkDelegateMethods:(NSDictionary<sp/>*)dictionary</highlight></codeline>
<codeline lineno="244"><highlight class="normal">{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>bk_linkProtocol:a2_delegateProtocol(self)<sp/>methods:dictionary];</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248" refid="category_n_s_object_07_a2_block_delegate_08_1a17a1106c617668695b2827b60eb0ef54" refkind="member"><highlight class="normal">+<sp/>(void)bk_linkProtocol:(Protocol<sp/>*)protocol<sp/>methods:(NSDictionary<sp/>*)dictionary</highlight></codeline>
<codeline lineno="249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>[dictionary<sp/>enumerateKeysAndObjectsUsingBlock:^(NSString<sp/>*propertyName,<sp/>NSString<sp/>*selectorName,<sp/>BOOL<sp/>*stop)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>char<sp/>*name<sp/>=<sp/>propertyName.UTF8String;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objc_property_t<sp/>property<sp/>=<sp/>class_getProperty(self,<sp/>name);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NSCAssert(property,<sp/>@&quot;Property<sp/>\&quot;%@\&quot;<sp/>does<sp/>not<sp/>exist<sp/>on<sp/>class<sp/>%s&quot;,<sp/>propertyName,<sp/>class_getName(self));</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char<sp/>*dynamic<sp/>=<sp/>property_copyAttributeValue(property,<sp/>&quot;D&quot;);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NSCAssert2(dynamic,<sp/>@&quot;Property<sp/>\&quot;%@\&quot;<sp/>on<sp/>class<sp/>%s<sp/>must<sp/>be<sp/>backed<sp/>with<sp/>\&quot;@dynamic\&quot;&quot;,<sp/>propertyName,<sp/>class_getName(self));</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(dynamic);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char<sp/>*copy<sp/>=<sp/>property_copyAttributeValue(property,<sp/>&quot;C&quot;);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NSCAssert2(copy,<sp/>@&quot;Property<sp/>\&quot;%@\&quot;<sp/>on<sp/>class<sp/>%s<sp/>must<sp/>be<sp/>defined<sp/>with<sp/>the<sp/>\&quot;copy\&quot;<sp/>attribute&quot;,<sp/>propertyName,<sp/>class_getName(self));</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(copy);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEL<sp/>selector<sp/>=<sp/>NSSelectorFromString(selectorName);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEL<sp/>getter<sp/>=<sp/>getterForProperty(property,<sp/>name);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEL<sp/>setter<sp/>=<sp/>setterForProperty(property,<sp/>name);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(class_respondsToSelector(self,<sp/>setter)<sp/>||<sp/>class_respondsToSelector(self,<sp/>getter))<sp/>{<sp/>return;<sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>A2BlockDelegateInfo<sp/>*info<sp/>=<sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>bk_delegateInfoForProtocol:protocol];</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMP<sp/>getterImplementation<sp/>=<sp/>imp_implementationWithBlock(^(NSObject<sp/>*delegatingObject)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A2DynamicDelegate<sp/>*delegate<sp/>=<sp/>getDynamicDelegate(delegatingObject,<sp/>protocol,<sp/>info,<sp/>NO);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>[delegate<sp/>blockImplementationForMethod:selector];</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!class_addMethod(self,<sp/>getter,<sp/>getterImplementation,<sp/>&quot;@@:&quot;))<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NSCAssert(NO,<sp/>@&quot;Could<sp/>not<sp/>implement<sp/>getter<sp/>for<sp/>\&quot;%@\&quot;<sp/>property.&quot;,<sp/>propertyName);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMP<sp/>setterImplementation<sp/>=<sp/>imp_implementationWithBlock(^(NSObject<sp/>*delegatingObject,<sp/>id<sp/>block)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A2DynamicDelegate<sp/>*delegate<sp/>=<sp/>getDynamicDelegate(delegatingObject,<sp/>protocol,<sp/>info,<sp/>YES);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[delegate<sp/>implementMethod:selector<sp/>withBlock:block];</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!class_addMethod(self,<sp/>setter,<sp/>setterImplementation,<sp/>&quot;v@:@&quot;))<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NSCAssert(NO,<sp/>@&quot;Could<sp/>not<sp/>implement<sp/>setter<sp/>for<sp/>\&quot;%@\&quot;<sp/>property.&quot;,<sp/>propertyName);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>}];</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>mark<sp/>Dynamic<sp/>Delegate<sp/>Replacement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293" refid="category_n_s_object_07_a2_block_delegate_08_1a480fbef279c2410facf8595a12b5af01" refkind="member"><highlight class="normal">+<sp/>(void)bk_registerDynamicDataSource</highlight></codeline>
<codeline lineno="294"><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>bk_registerDynamicDelegateNamed:@&quot;dataSource&quot;<sp/>forProtocol:a2_dataSourceProtocol(self)];</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297" refid="category_n_s_object_07_a2_block_delegate_08_1ab21d7ee270f5f512aaa8bbb6c02f97da" refkind="member"><highlight class="normal">+<sp/>(void)bk_registerDynamicDelegate</highlight></codeline>
<codeline lineno="298"><highlight class="normal">{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>bk_registerDynamicDelegateNamed:@&quot;delegate&quot;<sp/>forProtocol:a2_delegateProtocol(self)];</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="category_n_s_object_07_a2_block_delegate_08_1adda97d326a9e23845f4341ee2e1e2d9e" refkind="member"><highlight class="normal">+<sp/>(void)bk_registerDynamicDataSourceNamed:(NSString<sp/>*)dataSourceName</highlight></codeline>
<codeline lineno="303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>bk_registerDynamicDelegateNamed:dataSourceName<sp/>forProtocol:a2_dataSourceProtocol(self)];</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306" refid="category_n_s_object_07_a2_block_delegate_08_1aaf866ded488dfd89b531b768295d68e2" refkind="member"><highlight class="normal">+<sp/>(void)bk_registerDynamicDelegateNamed:(NSString<sp/>*)delegateName</highlight></codeline>
<codeline lineno="307"><highlight class="normal">{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>bk_registerDynamicDelegateNamed:delegateName<sp/>forProtocol:a2_delegateProtocol(self)];</highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311" refid="category_n_s_object_07_a2_block_delegate_08_1a51c5a4d9db2fb4dc2a9f2afd4170ca51" refkind="member"><highlight class="normal">+<sp/>(void)bk_registerDynamicDelegateNamed:(NSString<sp/>*)delegateName<sp/>forProtocol:(Protocol<sp/>*)protocol</highlight></codeline>
<codeline lineno="312"><highlight class="normal">{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>NSMapTable<sp/>*propertyMap<sp/>=<sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>bk_delegateInfoByProtocol:YES];</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a2_block_delegate_info" kindref="compound">A2BlockDelegateInfo</ref><sp/>*infoAsPtr<sp/>=<sp/>(__bridge<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)[propertyMap<sp/>objectForKey:protocol];</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(infoAsPtr<sp/>!=<sp/>NULL)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name<sp/>=<sp/>delegateName.UTF8String;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>objc_property_t<sp/></highlight><highlight class="keyword">property</highlight><highlight class="normal"><sp/>=<sp/>class_getProperty(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal"><sp/>setter<sp/>=<sp/>setterForProperty(property,<sp/>name);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal"><sp/>a2_setter<sp/>=<sp/>prefixedSelector(setter);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal"><sp/>getter<sp/>=<sp/>getterForProperty(property,<sp/>name);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a2_block_delegate_info" kindref="compound">A2BlockDelegateInfo</ref><sp/>info<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setter,<sp/>a2_setter,<sp/>getter</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>[propertyMap<sp/>setObject:(__bridge<sp/>id)&amp;info<sp/>forKey:protocol];</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>infoAsPtr<sp/>=<sp/>(__bridge<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)[propertyMap<sp/>objectForKey:protocol];</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>IMP<sp/>setterImplementation<sp/>=<sp/>imp_implementationWithBlock(^(NSObject<sp/>*delegatingObject,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>delegate)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_a2_dynamic_delegate" kindref="compound">A2DynamicDelegate</ref><sp/>*dynamicDelegate<sp/>=<sp/>getDynamicDelegate(delegatingObject,<sp/>protocol,<sp/>infoAsPtr,<sp/>YES);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>([delegate<sp/>isEqual:dynamicDelegate])<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delegate<sp/>=<sp/>nil;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynamicDelegate.realDelegate<sp/>=<sp/>delegate;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!swizzleWithIMP(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>setter,<sp/>a2_setter,<sp/>setterImplementation,<sp/></highlight><highlight class="stringliteral">&quot;v@:@&quot;</highlight><highlight class="normal">,<sp/>YES))<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bzero(infoAsPtr,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_a2_block_delegate_info" kindref="compound">A2BlockDelegateInfo</ref>));</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(![</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>instancesRespondToSelector:getter])<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMP<sp/>getterImplementation<sp/>=<sp/>imp_implementationWithBlock(^(NSObject<sp/>*delegatingObject)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[delegatingObject<sp/>bk_dynamicDelegateForProtocol:a2_protocolForDelegatingObject(delegatingObject,<sp/>protocol)];</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addMethodWithIMP(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>getter,<sp/>NULL,<sp/>getterImplementation,<sp/></highlight><highlight class="stringliteral">&quot;@@:&quot;</highlight><highlight class="normal">,<sp/>NO);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal">-<sp/>(id)bk_ensuredDynamicDelegate</highlight></codeline>
<codeline lineno="353"><highlight class="normal">{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>Protocol<sp/>*protocol<sp/>=<sp/><ref refid="_n_s_object_09_a2_block_delegate_8m_1a3a6f9f96f1c68dbb681a7b6c9f22efcf" kindref="member">a2_delegateProtocol</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.</highlight><highlight class="keyword">class</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>bk_ensuredDynamicDelegateForProtocol:protocol];</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358" refid="category_n_s_object_07_a2_block_delegate_08_1a9d937cae9c1a4b46c16f23a407d7f20f" refkind="member"><highlight class="normal">-<sp/>(id)bk_ensuredDynamicDelegateForProtocol:(Protocol<sp/>*)protocol</highlight></codeline>
<codeline lineno="359"><highlight class="normal">{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_a2_block_delegate_info" kindref="compound">A2BlockDelegateInfo</ref><sp/>*info<sp/>=<sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal">.class<sp/>bk_delegateInfoForProtocol:protocol];</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getDynamicDelegate(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>protocol,<sp/>info,<sp/>YES);</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="keyword">@end</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/NSObject+A2BlockDelegate.m"/>
  </compounddef>
</doxygen>
