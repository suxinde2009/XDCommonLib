<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="_a2_dynamic_delegate_8m" kind="file" language="Objective-C">
    <compoundname>A2DynamicDelegate.m</compoundname>
    <includes refid="_a2_dynamic_delegate_8h" local="yes">A2DynamicDelegate.h</includes>
    <includes refid="_a2_block_invocation_8h" local="yes">A2BlockInvocation.h</includes>
    <incdepgraph>
      <node id="2887">
        <label>A2DynamicDelegate.h</label>
        <link refid="_a2_dynamic_delegate_8h"/>
        <childnode refid="2888" relation="include">
        </childnode>
        <childnode refid="2890" relation="include">
        </childnode>
      </node>
      <node id="2886">
        <label>XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/A2DynamicDelegate.m</label>
        <link refid="A2DynamicDelegate.m"/>
        <childnode refid="2887" relation="include">
        </childnode>
        <childnode refid="2891" relation="include">
        </childnode>
      </node>
      <node id="2889">
        <label>Foundation/NSObjCRuntime.h</label>
      </node>
      <node id="2891">
        <label>A2BlockInvocation.h</label>
        <link refid="_a2_block_invocation_8h"/>
        <childnode refid="2888" relation="include">
        </childnode>
        <childnode refid="2890" relation="include">
        </childnode>
      </node>
      <node id="2888">
        <label>BKDefines.h</label>
        <link refid="_b_k_defines_8h"/>
        <childnode refid="2889" relation="include">
        </childnode>
      </node>
      <node id="2890">
        <label>Foundation/Foundation.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="category_n_s_map_table_07_b_k_additions_08" prot="public">NSMapTable(BKAdditions)</innerclass>
    <innerclass refid="interface_a2_dynamic_class_delegate" prot="public">A2DynamicClassDelegate</innerclass>
    <innerclass refid="category_a2_dynamic_delegate_07_08" prot="public">A2DynamicDelegate()</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_a2_dynamic_delegate_8m_1a19dd2af25ac6d5ede1801fd092465656" prot="public" static="no" mutable="no">
        <type>import ObjectiveC</type>
        <definition>import ObjectiveC message</definition>
        <argsstring></argsstring>
        <name>message</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/A2DynamicDelegate.m" line="7" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/A2DynamicDelegate.m" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_a2_dynamic_delegate_8m_1add92c5a4b943d3d7adbb37e41099657e" prot="public" static="no" mutable="no">
        <type>import ObjectiveC</type>
        <definition>import ObjectiveC runtime</definition>
        <argsstring></argsstring>
        <name>runtime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/A2DynamicDelegate.m" line="8" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/A2DynamicDelegate.m" bodystart="8" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_a2_dynamic_delegate_8m_1aa2a74db20c01ec765740a7b771d382df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Protocol *</type>
        <definition>Protocol * a2_dataSourceProtocol</definition>
        <argsstring>(Class cls)</argsstring>
        <name>a2_dataSourceProtocol</name>
        <param>
          <type>Class</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/A2DynamicDelegate.m" line="11" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/A2DynamicDelegate.m" bodystart="330" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="_a2_dynamic_delegate_8m_1a3eab88803c315baf95be484f5fc3cbfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Protocol *</type>
        <definition>Protocol * a2_delegateProtocol</definition>
        <argsstring>(Class cls)</argsstring>
        <name>a2_delegateProtocol</name>
        <param>
          <type>Class</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/A2DynamicDelegate.m" line="12" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/A2DynamicDelegate.m" bodystart="334" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="_a2_dynamic_delegate_8m_1ab9f5debbd1b89dec734f9782c35fa32e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Protocol *</type>
        <definition>Protocol * a2_protocolForDelegatingObject</definition>
        <argsstring>(id obj, Protocol *protocol)</argsstring>
        <name>a2_protocolForDelegatingObject</name>
        <param>
          <type>id</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>Protocol *</type>
          <declname>protocol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/A2DynamicDelegate.m" line="13" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/A2DynamicDelegate.m" bodystart="338" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="_a2_dynamic_delegate_8m_1a420d2fbe6003d95fd387064aa6494f27" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>static BOOL selectorsEqual</definition>
        <argsstring>(const void *item1, const void *item2, NSUInteger(*__unused size)(const void __unused *item))</argsstring>
        <name>selectorsEqual</name>
        <param>
          <type>const void *</type>
          <declname>item1</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>item2</declname>
        </param>
        <param>
          <type>NSUInteger(*)(const void __unused *item)</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/A2DynamicDelegate.m" line="15" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/A2DynamicDelegate.m" bodystart="15" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="_a2_dynamic_delegate_8m_1a0708544de4f7e027a58912ad90e153bd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NSString *</type>
        <definition>static NSString* selectorDescribe</definition>
        <argsstring>(const void *item1)</argsstring>
        <name>selectorDescribe</name>
        <param>
          <type>const void *</type>
          <declname>item1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/A2DynamicDelegate.m" line="20" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/A2DynamicDelegate.m" bodystart="20" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="_a2_dynamic_delegate_8m_1ab16b547aac87133b58eda6b8e6bde6f5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>BOOL</type>
        <definition>static BOOL protocol_declaredSelector</definition>
        <argsstring>(Protocol *protocol, SEL selector)</argsstring>
        <name>protocol_declaredSelector</name>
        <param>
          <type>Protocol *</type>
          <declname>protocol</declname>
        </param>
        <param>
          <type>SEL</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/A2DynamicDelegate.m" line="25" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/A2DynamicDelegate.m" bodystart="25" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="_a2_dynamic_delegate_8m_1a257e9393bd7f4b20c7ee0d06d86fcd1e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Protocol *</type>
        <definition>static Protocol* a2_classProtocol</definition>
        <argsstring>(Class _cls, NSString *suffix, NSString *description)</argsstring>
        <name>a2_classProtocol</name>
        <param>
          <type>Class</type>
          <declname>_cls</declname>
        </param>
        <param>
          <type>NSString *</type>
          <declname>suffix</declname>
        </param>
        <param>
          <type>NSString *</type>
          <declname>description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/A2DynamicDelegate.m" line="314" column="1" bodyfile="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/A2DynamicDelegate.m" bodystart="314" bodyend="328"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>A2DynamicDelegate.m</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>BlocksKit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#import<sp/>&quot;<ref refid="_a2_dynamic_delegate_8h" kindref="compound">A2DynamicDelegate.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="_a2_dynamic_delegate_8m_1a19dd2af25ac6d5ede1801fd092465656" refkind="member"><highlight class="normal">@</highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>ObjectiveC.message;</highlight></codeline>
<codeline lineno="8" refid="_a2_dynamic_delegate_8m_1add92c5a4b943d3d7adbb37e41099657e" refkind="member"><highlight class="normal">@</highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>ObjectiveC.runtime;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#import<sp/>&quot;<ref refid="_a2_block_invocation_8h" kindref="compound">A2BlockInvocation.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal">Protocol<sp/>*<ref refid="_a2_dynamic_delegate_8m_1aa2a74db20c01ec765740a7b771d382df" kindref="member">a2_dataSourceProtocol</ref>(Class<sp/>cls);</highlight></codeline>
<codeline lineno="12"><highlight class="normal">Protocol<sp/>*<ref refid="_a2_dynamic_delegate_8m_1a3eab88803c315baf95be484f5fc3cbfc" kindref="member">a2_delegateProtocol</ref>(Class<sp/>cls);</highlight></codeline>
<codeline lineno="13"><highlight class="normal">Protocol<sp/>*<ref refid="_a2_dynamic_delegate_8m_1ab9f5debbd1b89dec734f9782c35fa32e" kindref="member">a2_protocolForDelegatingObject</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>obj,<sp/>Protocol<sp/>*<ref refid="class_a2_dynamic_delegate_1aadf9caaae47a8b14f11ee6d0cbe95660" kindref="member">protocol</ref>);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOL<sp/>selectorsEqual(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*item1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*item2,<sp/>NSUInteger(*__unused<sp/>size)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__unused<sp/>*item))</highlight></codeline>
<codeline lineno="16"><highlight class="normal">{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sel_isEqual((</highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal">)item1,<sp/>(</highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal">)item2);</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>NSString<sp/>*selectorDescribe(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*item1)</highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NSStringFromSelector((</highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal">)item1);</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>BOOL<sp/>protocol_declaredSelector(Protocol<sp/>*<ref refid="class_a2_dynamic_delegate_1aadf9caaae47a8b14f11ee6d0cbe95660" kindref="member">protocol</ref>,<sp/></highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal"><sp/>selector)</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOL<sp/>required<sp/>=<sp/>1<sp/>&amp;<sp/>(i);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOL<sp/>instance<sp/>=<sp/>1<sp/>&amp;<sp/>(i<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">objc_method_description<sp/>description<sp/>=<sp/>protocol_getMethodDescription(protocol,<sp/>selector,<sp/>required,<sp/>instance);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(description.name)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>YES;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NO;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="category_n_s_map_table_07_b_k_additions_08" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">@interface<sp/></highlight><highlight class="normal"><ref refid="category_n_s_map_table_07_b_k_additions_08" kindref="compound">NSMapTable (BKAdditions)</ref></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">+<sp/>(instancetype)<ref refid="category_n_s_map_table_07_b_k_additions_08_1af0f01bdf40e4a3586d8ae38f3dbd953f" kindref="member">bk_selectorsToStrongObjectsMapTable</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">-<sp/>(id)bk_objectForSelector:(</highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal">)aSEL;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">-<sp/>(void)bk_removeObjectForSelector:(</highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal">)aSEL;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">-<sp/>(void)bk_setObject:(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)anObject<sp/>forSelector:(</highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal">)aSEL;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">@end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">@implementation<sp/></highlight><highlight class="normal"><ref refid="category_n_s_map_table_07_b_k_additions_08" kindref="compound">NSMapTable (BKAdditions)</ref></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="category_n_s_map_table_07_b_k_additions_08_1af0f01bdf40e4a3586d8ae38f3dbd953f" refkind="member"><highlight class="normal">+<sp/>(instancetype)<ref refid="category_n_s_map_table_07_b_k_additions_08_1af0f01bdf40e4a3586d8ae38f3dbd953f" kindref="member">bk_selectorsToStrongObjectsMapTable</ref></highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>NSPointerFunctions<sp/>*selectors<sp/>=<sp/>[NSPointerFunctions<sp/>pointerFunctionsWithOptions:NSPointerFunctionsOpaqueMemory|NSPointerFunctionsOpaquePersonality];</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>selectors.isEqualFunction<sp/>=<sp/>selectorsEqual;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>selectors.descriptionFunction<sp/>=<sp/>selectorDescribe;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>NSPointerFunctions<sp/>*strongObjects<sp/>=<sp/>[NSPointerFunctions<sp/>pointerFunctionsWithOptions:NSPointerFunctionsStrongMemory|NSPointerFunctionsObjectPersonality];</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[[NSMapTable<sp/>alloc]<sp/>initWithKeyPointerFunctions:selectors<sp/>valuePointerFunctions:strongObjects<sp/>capacity:1];</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="category_n_s_map_table_07_b_k_additions_08_1a927da7ae132b4831d0479f22d5edadf3" refkind="member"><highlight class="normal">-<sp/>(id)bk_objectForSelector:(</highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal">)aSEL</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*selAsPtr<sp/>=<sp/>aSEL;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>objectForKey:(__bridge<sp/>id)selAsPtr];</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="category_n_s_map_table_07_b_k_additions_08_1a450066e799d5d92c2eb1feb3dbdb84a2" refkind="member"><highlight class="normal">-<sp/>(void)bk_removeObjectForSelector:(</highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal">)aSEL</highlight></codeline>
<codeline lineno="68"><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*selAsPtr<sp/>=<sp/>aSEL;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>removeObjectForKey:(__bridge<sp/>id)selAsPtr];</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="category_n_s_map_table_07_b_k_additions_08_1ab1dd59d269717c477048a9284403193c" refkind="member"><highlight class="normal">-<sp/>(void)bk_setObject:(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)anObject<sp/>forSelector:(</highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal">)aSEL</highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*selAsPtr<sp/>=<sp/>aSEL;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>setObject:anObject<sp/>forKey:(__bridge<sp/>id)selAsPtr];</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">@end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="interface_a2_dynamic_class_delegate" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">@interface<sp/></highlight><highlight class="normal"><ref refid="interface_a2_dynamic_class_delegate" kindref="compound">A2DynamicClassDelegate</ref><sp/>:<sp/><ref refid="class_a2_dynamic_delegate" kindref="compound">A2DynamicDelegate</ref></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="interface_a2_dynamic_class_delegate_1afb3121323d8b97ca305229d4fdc80090" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">@property</highlight><highlight class="normal"><sp/>(nonatomic)<sp/>Class<sp/>proxiedClass;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">@end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>mark<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="category_a2_dynamic_delegate_07_08" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">@interface<sp/></highlight><highlight class="normal"><ref refid="class_a2_dynamic_delegate" kindref="compound">A2DynamicDelegate</ref><sp/>()</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="category_a2_dynamic_delegate_07_08_1a2102b388bf4803762f334494f9aa9827" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">@property</highlight><highlight class="normal"><sp/>(nonatomic)<sp/><ref refid="interface_a2_dynamic_class_delegate" kindref="compound">A2DynamicClassDelegate</ref><sp/>*classProxy;</highlight></codeline>
<codeline lineno="93" refid="category_a2_dynamic_delegate_07_08_1a9080d5cadd38add4a519b9ae1cb1c8ac" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">@property</highlight><highlight class="normal"><sp/>(nonatomic,<sp/>readonly)<sp/>NSMapTable<sp/>*invocationsBySelectors;</highlight></codeline>
<codeline lineno="94" refid="category_a2_dynamic_delegate_07_08_1a6fab05bc5cba3d201cdda8e649edeb01" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">@property</highlight><highlight class="normal"><sp/>(nonatomic,<sp/>weak,<sp/>readwrite)<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/><ref refid="class_a2_dynamic_delegate_1a4c7e2f4153dc34cc4c05a72d1647d62c" kindref="member">realDelegate</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">-<sp/>(BOOL)<sp/>isClassProxy;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">@end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="class_a2_dynamic_delegate" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">@implementation<sp/></highlight><highlight class="normal"><ref refid="class_a2_dynamic_delegate" kindref="compound">A2DynamicDelegate</ref></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal">-<sp/>(<ref refid="interface_a2_dynamic_class_delegate" kindref="compound">A2DynamicClassDelegate</ref><sp/>*)classProxy</highlight></codeline>
<codeline lineno="103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_classProxy)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_classProxy<sp/>=<sp/>[[<ref refid="interface_a2_dynamic_class_delegate" kindref="compound">A2DynamicClassDelegate</ref><sp/>alloc]<sp/>initWithProtocol:self.protocol];</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_classProxy.<ref refid="interface_a2_dynamic_class_delegate_1afb3121323d8b97ca305229d4fdc80090" kindref="member">proxiedClass</ref><sp/>=<sp/>object_getClass(</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_classProxy;</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal">-<sp/>(BOOL)isClassProxy</highlight></codeline>
<codeline lineno="114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NO;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">-<sp/>(Class)class</highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>Class<sp/>myClass<sp/>=<sp/>object_getClass(</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(myClass<sp/>==<sp/>[<ref refid="class_a2_dynamic_delegate" kindref="compound">A2DynamicDelegate</ref><sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">]<sp/>||<sp/>[myClass<sp/>superclass]<sp/>==<sp/>[<ref refid="class_a2_dynamic_delegate" kindref="compound">A2DynamicDelegate</ref><sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Class)</highlight><highlight class="keyword">self</highlight><highlight class="normal">.classProxy;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[</highlight><highlight class="keyword">super</highlight><highlight class="normal"><sp/>class];</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="class_a2_dynamic_delegate_1a36999c979855161a15d3281abf5034e9" refkind="member"><highlight class="normal">-<sp/>(instancetype)initWithProtocol:(Protocol<sp/>*)protocol</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>_protocol<sp/>=<sp/><ref refid="class_a2_dynamic_delegate_1aadf9caaae47a8b14f11ee6d0cbe95660" kindref="member">protocol</ref>;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>_handlers<sp/>=<sp/>[NSMutableDictionary<sp/>dictionary];</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>_invocationsBySelectors<sp/>=<sp/>[NSMapTable<sp/>bk_selectorsToStrongObjectsMapTable];</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">-<sp/>(NSMethodSignature<sp/>*)methodSignatureForSelector:(</highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal">)aSelector</highlight></codeline>
<codeline lineno="135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_a2_block_invocation" kindref="compound">A2BlockInvocation</ref><sp/>*invocation<sp/>=<sp/>nil;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((invocation<sp/>=<sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal">.invocationsBySelectors<sp/>bk_objectForSelector:aSelector]))</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>invocation.<ref refid="class_a2_block_invocation_1a65f8b92237ea6135b7615830fb86ddeb" kindref="member">methodSignature</ref>;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>([</highlight><highlight class="keyword">self</highlight><highlight class="normal">.<ref refid="class_a2_dynamic_delegate_1a4c7e2f4153dc34cc4c05a72d1647d62c" kindref="member">realDelegate</ref><sp/>methodSignatureForSelector:aSelector])</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal">.realDelegate<sp/>methodSignatureForSelector:aSelector];</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(class_respondsToSelector(object_getClass(</highlight><highlight class="keyword">self</highlight><highlight class="normal">),<sp/>aSelector))</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[object_getClass(self)<sp/>methodSignatureForSelector:aSelector];</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[[NSObject<sp/>class]<sp/>methodSignatureForSelector:aSelector];</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal">+<sp/>(NSString<sp/>*)description</highlight></codeline>
<codeline lineno="147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">@&quot;A2DynamicDelegate&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal">-<sp/>(NSString<sp/>*)description</highlight></codeline>
<codeline lineno="151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[NSString<sp/>stringWithFormat:@&quot;&lt;A2DynamicDelegate:%p;<sp/>protocol<sp/>=<sp/>%@&gt;&quot;,<sp/>(__bridge<sp/>void<sp/>*)self,<sp/>NSStringFromProtocol(self.protocol)];</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">-<sp/>(void)forwardInvocation:(NSInvocation<sp/>*)outerInv</highlight></codeline>
<codeline lineno="156"><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal"><sp/>selector<sp/>=<sp/>outerInv.selector;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_a2_block_invocation" kindref="compound">A2BlockInvocation</ref><sp/>*innerInv<sp/>=<sp/>nil;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((innerInv<sp/>=<sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal">.invocationsBySelectors<sp/>bk_objectForSelector:selector]))<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[innerInv<sp/><ref refid="class_a2_block_invocation_1aa0e34d21caa34f802163e54ce67c1021" kindref="member">invokeWithInvocation</ref>:outerInv];</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>([</highlight><highlight class="keyword">self</highlight><highlight class="normal">.<ref refid="class_a2_dynamic_delegate_1a4c7e2f4153dc34cc4c05a72d1647d62c" kindref="member">realDelegate</ref><sp/>respondsToSelector:selector])<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[outerInv<sp/>invokeWithTarget:self.realDelegate];</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>mark<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">-<sp/>(BOOL)conformsToProtocol:(Protocol<sp/>*)aProtocol</highlight></codeline>
<codeline lineno="169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>protocol_isEqual(aProtocol,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.<ref refid="class_a2_dynamic_delegate_1aadf9caaae47a8b14f11ee6d0cbe95660" kindref="member">protocol</ref>)<sp/>||<sp/>[</highlight><highlight class="keyword">super</highlight><highlight class="normal"><sp/>conformsToProtocol:aProtocol];</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal">-<sp/>(BOOL)respondsToSelector:(</highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal">)selector</highlight></codeline>
<codeline lineno="173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal">.invocationsBySelectors<sp/>bk_objectForSelector:selector]<sp/>||</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_respondsToSelector(object_getClass(</highlight><highlight class="keyword">self</highlight><highlight class="normal">),<sp/>selector)<sp/><sp/><sp/>||</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(protocol_declaredSelector(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.<ref refid="class_a2_dynamic_delegate_1aadf9caaae47a8b14f11ee6d0cbe95660" kindref="member">protocol</ref>,<sp/>selector)<sp/>&amp;&amp;<sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal">.realDelegate<sp/>respondsToSelector:selector]);</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal">-<sp/>(void)doesNotRecognizeSelector:(</highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal">)aSelector</highlight></codeline>
<codeline lineno="180"><highlight class="normal">{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>[NSException<sp/>raise:NSInvalidArgumentException<sp/>format:@&quot;-[%s<sp/>%@]:<sp/>unrecognized<sp/>selector<sp/>sent<sp/>to<sp/>instance<sp/>%p&quot;,<sp/>object_getClassName(self),<sp/>NSStringFromSelector(aSelector),<sp/>(__bridge<sp/>void<sp/>*)self];</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>mark<sp/>-<sp/>Block<sp/>Instance<sp/>Method<sp/>Implementations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="class_a2_dynamic_delegate_1ae9a18617d0ab9fec8f6003889a4ee9f4" refkind="member"><highlight class="normal">-<sp/>(id)blockImplementationForMethod:(</highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal">)selector</highlight></codeline>
<codeline lineno="187"><highlight class="normal">{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_a2_block_invocation" kindref="compound">A2BlockInvocation</ref><sp/>*invocation<sp/>=<sp/>nil;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((invocation<sp/>=<sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal">.invocationsBySelectors<sp/>bk_objectForSelector:selector]))</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>invocation.<ref refid="class_a2_block_invocation_1a2816454241d99d2da43c35d51691acb4" kindref="member">block</ref>;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal">-<sp/>(void)implementMethod:(</highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal">)selector<sp/>withBlock:(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)block</highlight></codeline>
<codeline lineno="195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>NSCAssert(selector,<sp/></highlight><highlight class="stringliteral">@&quot;Attempt<sp/>to<sp/>implement<sp/>or<sp/>remove<sp/>NULL<sp/>selector&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOL<sp/>isClassMethod<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.isClassProxy;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!block)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal">.invocationsBySelectors<sp/>bk_removeObjectForSelector:selector];</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">objc_method_description<sp/>methodDescription<sp/>=<sp/>protocol_getMethodDescription(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.protocol,<sp/>selector,<sp/>YES,<sp/>!isClassMethod);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!methodDescription.name)<sp/>methodDescription<sp/>=<sp/>protocol_getMethodDescription(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.protocol,<sp/>selector,<sp/>NO,<sp/>!isClassMethod);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_a2_block_invocation" kindref="compound">A2BlockInvocation</ref><sp/>*inv<sp/>=<sp/>nil;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(methodDescription.name)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NSMethodSignature<sp/>*protoSig<sp/>=<sp/>[NSMethodSignature<sp/>signatureWithObjCTypes:methodDescription.types];</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inv<sp/>=<sp/>[[<ref refid="class_a2_block_invocation" kindref="compound">A2BlockInvocation</ref><sp/>alloc]<sp/>initWithBlock:block<sp/>methodSignature:protoSig];</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inv<sp/>=<sp/>[[<ref refid="class_a2_block_invocation" kindref="compound">A2BlockInvocation</ref><sp/>alloc]<sp/>initWithBlock:block];</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal">.invocationsBySelectors<sp/>bk_setObject:inv<sp/>forSelector:selector];</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217" refid="class_a2_dynamic_delegate_1a85289773679bf26c333cdd3b46d4cb01" refkind="member"><highlight class="normal">-<sp/>(void)removeBlockImplementationForMethod:(</highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal">)selector<sp/>__unused</highlight></codeline>
<codeline lineno="218"><highlight class="normal">{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/><ref refid="class_a2_dynamic_delegate_1a09f6348635418baf7f5c797bbe2a8fa9" kindref="member">implementMethod</ref>:selector<sp/><ref refid="class_a2_dynamic_delegate_1a09f6348635418baf7f5c797bbe2a8fa9" kindref="member">withBlock</ref>:nil];</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>mark<sp/>-<sp/>Block<sp/>Class<sp/>Method<sp/>Implementations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224" refid="class_a2_dynamic_delegate_1a929f5f9e3f57608a21b5db23807b9cdc" refkind="member"><highlight class="normal">-<sp/>(id)blockImplementationForClassMethod:(</highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal">)selector</highlight></codeline>
<codeline lineno="225"><highlight class="normal">{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal">.classProxy<sp/><ref refid="class_a2_dynamic_delegate_1ae9a18617d0ab9fec8f6003889a4ee9f4" kindref="member">blockImplementationForMethod</ref>:selector];</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal">-<sp/>(void)implementClassMethod:(</highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal">)selector<sp/>withBlock:(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)block</highlight></codeline>
<codeline lineno="230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal">.classProxy<sp/>implementMethod:selector<sp/>withBlock:block];</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233" refid="class_a2_dynamic_delegate_1a911986db7039baba90d8778838e11fc9" refkind="member"><highlight class="normal">-<sp/>(void)removeBlockImplementationForClassMethod:(</highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal">)selector<sp/>__unused</highlight></codeline>
<codeline lineno="234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal">.classProxy<sp/><ref refid="class_a2_dynamic_delegate_1a09f6348635418baf7f5c797bbe2a8fa9" kindref="member">implementMethod</ref>:selector<sp/><ref refid="class_a2_dynamic_delegate_1a09f6348635418baf7f5c797bbe2a8fa9" kindref="member">withBlock</ref>:nil];</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keyword">@end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>mark<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keyword">@implementation<sp/></highlight><highlight class="normal"><ref refid="interface_a2_dynamic_class_delegate" kindref="compound">A2DynamicClassDelegate</ref></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal">-<sp/>(BOOL)isClassProxy</highlight></codeline>
<codeline lineno="245"><highlight class="normal">{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>YES;</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal">-<sp/>(BOOL)isEqual:(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)object</highlight></codeline>
<codeline lineno="249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[</highlight><highlight class="keyword">super</highlight><highlight class="normal"><sp/>isEqual:object]<sp/>||<sp/>[_proxiedClass<sp/>isEqual:object];</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal">-<sp/>(BOOL)respondsToSelector:(</highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal">)aSelector</highlight></codeline>
<codeline lineno="253"><highlight class="normal">{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal">.invocationsBySelectors<sp/>bk_objectForSelector:aSelector]<sp/>||<sp/>[_proxiedClass<sp/>respondsToSelector:aSelector];</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal">-<sp/>(Class)class</highlight></codeline>
<codeline lineno="258"><highlight class="normal">{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.<ref refid="interface_a2_dynamic_class_delegate_1afb3121323d8b97ca305229d4fdc80090" kindref="member">proxiedClass</ref>;</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal">-<sp/>(NSMethodSignature<sp/>*)methodSignatureForSelector:(</highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal">)aSelector</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_a2_block_invocation" kindref="compound">A2BlockInvocation</ref><sp/>*invocation<sp/>=<sp/>nil;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((invocation<sp/>=<sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal">.invocationsBySelectors<sp/>bk_objectForSelector:aSelector]))</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>invocation.<ref refid="class_a2_block_invocation_1a65f8b92237ea6135b7615830fb86ddeb" kindref="member">methodSignature</ref>;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>([_proxiedClass<sp/>methodSignatureForSelector:aSelector])</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[_proxiedClass<sp/>methodSignatureForSelector:aSelector];</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[[NSObject<sp/>class]<sp/>methodSignatureForSelector:aSelector];</highlight></codeline>
<codeline lineno="270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal">-<sp/>(NSString<sp/>*)description</highlight></codeline>
<codeline lineno="273"><highlight class="normal">{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[_proxiedClass<sp/>description];</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal">-<sp/>(NSUInteger)hash</highlight></codeline>
<codeline lineno="278"><highlight class="normal">{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[_proxiedClass<sp/>hash];</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal">-<sp/>(void)forwardInvocation:(NSInvocation<sp/>*)outerInv</highlight></codeline>
<codeline lineno="283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal"><sp/>selector<sp/>=<sp/>outerInv.selector;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_a2_block_invocation" kindref="compound">A2BlockInvocation</ref><sp/>*innerInv<sp/>=<sp/>nil;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((innerInv<sp/>=<sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal">.invocationsBySelectors<sp/>bk_objectForSelector:selector]))<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[innerInv<sp/><ref refid="class_a2_block_invocation_1aa0e34d21caa34f802163e54ce67c1021" kindref="member">invokeWithInvocation</ref>:outerInv];</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[outerInv<sp/>invokeWithTarget:_proxiedClass];</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>mark<sp/>-<sp/>Unavailable<sp/>Methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal">-<sp/>(id)blockImplementationForClassMethod:(</highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal">)selector</highlight></codeline>
<codeline lineno="296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>doesNotRecognizeSelector:_cmd];</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nil;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal">-<sp/>(void)implementClassMethod:(</highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal">)selector<sp/>withBlock:(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)block</highlight></codeline>
<codeline lineno="302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>doesNotRecognizeSelector:_cmd];</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal">-<sp/>(void)removeBlockImplementationForClassMethod:(</highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal">)selector</highlight></codeline>
<codeline lineno="306"><highlight class="normal">{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>doesNotRecognizeSelector:_cmd];</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keyword">@end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>mark<sp/>-<sp/>Helper<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Protocol<sp/>*a2_classProtocol(Class<sp/>_cls,<sp/>NSString<sp/>*suffix,<sp/>NSString<sp/>*description)</highlight></codeline>
<codeline lineno="315"><highlight class="normal">{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>Class<sp/>cls<sp/>=<sp/>_cls;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(cls)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NSString<sp/>*className<sp/>=<sp/>NSStringFromClass(cls);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NSString<sp/>*protocolName<sp/>=<sp/>[className<sp/>stringByAppendingString:suffix];</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Protocol<sp/>*<ref refid="class_a2_dynamic_delegate_1aadf9caaae47a8b14f11ee6d0cbe95660" kindref="member">protocol</ref><sp/>=<sp/>objc_getProtocol(protocolName.UTF8String);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(protocol)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_a2_dynamic_delegate_1aadf9caaae47a8b14f11ee6d0cbe95660" kindref="member">protocol</ref>;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cls<sp/>=<sp/>class_getSuperclass(cls);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>NSCAssert(NO,<sp/></highlight><highlight class="stringliteral">@&quot;Specify<sp/>protocol<sp/>explicitly:<sp/>could<sp/>not<sp/>determine<sp/>%@<sp/>protocol<sp/>for<sp/>class<sp/>%@<sp/>(tried<sp/>&lt;%@&gt;)&quot;</highlight><highlight class="normal">,<sp/>description,<sp/>NSStringFromClass(_cls),<sp/>[NSStringFromClass(_cls)<sp/>stringByAppendingString:suffix]);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nil;</highlight></codeline>
<codeline lineno="328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330" refid="_n_s_object_09_a2_dynamic_delegate_8m_1a69002dc9b55486c0431b70eb5c05316f" refkind="member"><highlight class="normal">Protocol<sp/>*<ref refid="_a2_dynamic_delegate_8m_1aa2a74db20c01ec765740a7b771d382df" kindref="member">a2_dataSourceProtocol</ref>(Class<sp/>cls)</highlight></codeline>
<codeline lineno="331"><highlight class="normal">{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a2_classProtocol(cls,<sp/></highlight><highlight class="stringliteral">@&quot;DataSource&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">@&quot;data<sp/>source&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334" refid="_n_s_object_09_a2_dynamic_delegate_8m_1a3a6f9f96f1c68dbb681a7b6c9f22efcf" refkind="member"><highlight class="normal">Protocol<sp/>*<ref refid="_a2_dynamic_delegate_8m_1a3eab88803c315baf95be484f5fc3cbfc" kindref="member">a2_delegateProtocol</ref>(Class<sp/>cls)</highlight></codeline>
<codeline lineno="335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a2_classProtocol(cls,<sp/></highlight><highlight class="stringliteral">@&quot;Delegate&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">@&quot;delegate&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338" refid="_a2_dynamic_delegate_8m_1ab9f5debbd1b89dec734f9782c35fa32e" refkind="member"><highlight class="normal">Protocol<sp/>*<ref refid="_a2_dynamic_delegate_8m_1ab9f5debbd1b89dec734f9782c35fa32e" kindref="member">a2_protocolForDelegatingObject</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>obj,<sp/>Protocol<sp/>*protocol)</highlight></codeline>
<codeline lineno="339"><highlight class="normal">{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>NSString<sp/>*protocolName<sp/>=<sp/>NSStringFromProtocol(protocol);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>([protocolName<sp/>hasSuffix:</highlight><highlight class="stringliteral">@&quot;Delegate&quot;</highlight><highlight class="normal">])<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Protocol<sp/>*p<sp/>=<sp/><ref refid="_a2_dynamic_delegate_8m_1a3eab88803c315baf95be484f5fc3cbfc" kindref="member">a2_delegateProtocol</ref>([obj<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>([protocolName<sp/>hasSuffix:</highlight><highlight class="stringliteral">@&quot;DataSource&quot;</highlight><highlight class="normal">])<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Protocol<sp/>*p<sp/>=<sp/><ref refid="_a2_dynamic_delegate_8m_1aa2a74db20c01ec765740a7b771d382df" kindref="member">a2_dataSourceProtocol</ref>([obj<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_a2_dynamic_delegate_1aadf9caaae47a8b14f11ee6d0cbe95660" kindref="member">protocol</ref>;</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/suxinde/XDCommonLib/XDCommonLib/CommonBasicComponentLayer/Utils/BlocksKit/DynamicDelegate/A2DynamicDelegate.m"/>
  </compounddef>
</doxygen>
